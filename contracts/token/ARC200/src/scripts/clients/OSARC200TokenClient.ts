/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"OSARC200Token","structs":{},"methods":[{"name":"mint","desc":"Mint tokens","args":[{"name":"receiver","type":"address"},{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"decimals","type":"uint8"},{"name":"totalSupply","type":"uint256"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"kill","desc":"Kill contract","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"arc200_name","args":[],"returns":{"type":"byte[32]"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_symbol","args":[],"returns":{"type":"byte[8]"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_decimals","args":[],"returns":{"type":"uint8"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_totalSupply","args":[],"returns":{"type":"uint256"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_balanceOf","args":[{"name":"account","type":"address"}],"returns":{"type":"uint256"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_allowance","args":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"returns":{"type":"uint256"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_transferFrom","args":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_transfer","args":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_approve","args":[{"name":"spender","type":"address"},{"name":"amount","type":"uint256"}],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_version","args":[{"name":"contract_version","type":"uint64"},{"name":"deployment_version","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"approve_update","args":[{"name":"approval","type":"bool"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"grant_upgrader","args":[{"name":"upgrader","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_delegate","args":[{"name":"delegate","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"participate","args":[{"name":"vote_k","type":"byte[32]"},{"name":"sel_k","type":"byte[32]"},{"name":"vote_fst","type":"uint64"},{"name":"vote_lst","type":"uint64"},{"name":"vote_kd","type":"uint64"},{"name":"sp_key","type":"byte[64]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"transfer","desc":"Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.","args":[{"name":"new_owner","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":6,"bytes":7},"local":{"ints":0,"bytes":0}},"keys":{"global":{"contract_version":{"key":"Y29udHJhY3RfdmVyc2lvbg==","keyType":"AVMString","valueType":"AVMUint64"},"decimals":{"key":"ZGVjaW1hbHM=","keyType":"AVMString","valueType":"AVMUint64"},"delegate":{"key":"ZGVsZWdhdGU=","keyType":"AVMString","valueType":"AVMBytes"},"deployer":{"key":"ZGVwbG95ZXI=","keyType":"AVMString","valueType":"AVMBytes"},"deployment_version":{"key":"ZGVwbG95bWVudF92ZXJzaW9u","keyType":"AVMString","valueType":"AVMUint64"},"name":{"key":"bmFtZQ==","keyType":"AVMString","valueType":"AVMBytes"},"owner":{"key":"b3duZXI=","keyType":"AVMString","valueType":"AVMBytes"},"parent_id":{"key":"cGFyZW50X2lk","keyType":"AVMString","valueType":"AVMUint64"},"stakeable":{"key":"c3Rha2VhYmxl","keyType":"AVMString","valueType":"AVMUint64"},"symbol":{"key":"c3ltYm9s","keyType":"AVMString","valueType":"AVMBytes"},"totalSupply":{"key":"dG90YWxTdXBwbHk=","keyType":"AVMString","valueType":"AVMBytes"},"updatable":{"key":"dXBkYXRhYmxl","keyType":"AVMString","valueType":"AVMUint64"},"upgrader":{"key":"dXBncmFkZXI=","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5PU0FSQzIwMFRva2VuLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU0MgogICAgLy8gY2xhc3MgT1NBUkMyMDBUb2tlbihBUkMyMDBUb2tlbiwgVXBncmFkZWFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="},"bareActions":{"create":["NoOp"],"call":["UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Osarc200Token contract
 */
export type Osarc200TokenArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'mint(address,byte[32],byte[8],uint8,uint256)void': {
      receiver: string
      name: Uint8Array
      symbol: Uint8Array
      decimals: bigint | number
      totalSupply: bigint | number
    }
    'kill()void': Record<string, never>
    'arc200_name()byte[32]': Record<string, never>
    'arc200_symbol()byte[8]': Record<string, never>
    'arc200_decimals()uint8': Record<string, never>
    'arc200_totalSupply()uint256': Record<string, never>
    'arc200_balanceOf(address)uint256': {
      account: string
    }
    'arc200_allowance(address,address)uint256': {
      owner: string
      spender: string
    }
    'arc200_transferFrom(address,address,uint256)bool': {
      sender: string
      recipient: string
      amount: bigint | number
    }
    'arc200_transfer(address,uint256)bool': {
      recipient: string
      amount: bigint | number
    }
    'arc200_approve(address,uint256)bool': {
      spender: string
      amount: bigint | number
    }
    'set_version(uint64,uint64)void': {
      contractVersion: bigint | number
      deploymentVersion: bigint | number
    }
    'approve_update(bool)void': {
      approval: boolean
    }
    'grant_upgrader(address)void': {
      upgrader: string
    }
    'set_delegate(address)void': {
      delegate: string
    }
    'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void': {
      voteK: Uint8Array
      selK: Uint8Array
      voteFst: bigint | number
      voteLst: bigint | number
      voteKd: bigint | number
      spKey: Uint8Array
    }
    'transfer(address)void': {
      newOwner: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'mint(address,byte[32],byte[8],uint8,uint256)void': [receiver: string, name: Uint8Array, symbol: Uint8Array, decimals: bigint | number, totalSupply: bigint | number]
    'kill()void': []
    'arc200_name()byte[32]': []
    'arc200_symbol()byte[8]': []
    'arc200_decimals()uint8': []
    'arc200_totalSupply()uint256': []
    'arc200_balanceOf(address)uint256': [account: string]
    'arc200_allowance(address,address)uint256': [owner: string, spender: string]
    'arc200_transferFrom(address,address,uint256)bool': [sender: string, recipient: string, amount: bigint | number]
    'arc200_transfer(address,uint256)bool': [recipient: string, amount: bigint | number]
    'arc200_approve(address,uint256)bool': [spender: string, amount: bigint | number]
    'set_version(uint64,uint64)void': [contractVersion: bigint | number, deploymentVersion: bigint | number]
    'approve_update(bool)void': [approval: boolean]
    'grant_upgrader(address)void': [upgrader: string]
    'set_delegate(address)void': [delegate: string]
    'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void': [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
    'transfer(address)void': [newOwner: string]
  }
}

/**
 * The return type for each method
 */
export type Osarc200TokenReturns = {
  'mint(address,byte[32],byte[8],uint8,uint256)void': void
  'kill()void': void
  'arc200_name()byte[32]': Uint8Array
  'arc200_symbol()byte[8]': Uint8Array
  'arc200_decimals()uint8': number
  'arc200_totalSupply()uint256': bigint
  'arc200_balanceOf(address)uint256': bigint
  'arc200_allowance(address,address)uint256': bigint
  'arc200_transferFrom(address,address,uint256)bool': boolean
  'arc200_transfer(address,uint256)bool': boolean
  'arc200_approve(address,uint256)bool': boolean
  'set_version(uint64,uint64)void': void
  'approve_update(bool)void': void
  'grant_upgrader(address)void': void
  'set_delegate(address)void': void
  'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void': void
  'transfer(address)void': void
}

/**
 * Defines the types of available calls and state of the Osarc200Token smart contract.
 */
export type Osarc200TokenTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'mint(address,byte[32],byte[8],uint8,uint256)void' | 'mint', {
      argsObj: Osarc200TokenArgs['obj']['mint(address,byte[32],byte[8],uint8,uint256)void']
      argsTuple: Osarc200TokenArgs['tuple']['mint(address,byte[32],byte[8],uint8,uint256)void']
      returns: Osarc200TokenReturns['mint(address,byte[32],byte[8],uint8,uint256)void']
    }>
    & Record<'kill()void' | 'kill', {
      argsObj: Osarc200TokenArgs['obj']['kill()void']
      argsTuple: Osarc200TokenArgs['tuple']['kill()void']
      returns: Osarc200TokenReturns['kill()void']
    }>
    & Record<'arc200_name()byte[32]' | 'arc200_name', {
      argsObj: Osarc200TokenArgs['obj']['arc200_name()byte[32]']
      argsTuple: Osarc200TokenArgs['tuple']['arc200_name()byte[32]']
      returns: Osarc200TokenReturns['arc200_name()byte[32]']
    }>
    & Record<'arc200_symbol()byte[8]' | 'arc200_symbol', {
      argsObj: Osarc200TokenArgs['obj']['arc200_symbol()byte[8]']
      argsTuple: Osarc200TokenArgs['tuple']['arc200_symbol()byte[8]']
      returns: Osarc200TokenReturns['arc200_symbol()byte[8]']
    }>
    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {
      argsObj: Osarc200TokenArgs['obj']['arc200_decimals()uint8']
      argsTuple: Osarc200TokenArgs['tuple']['arc200_decimals()uint8']
      returns: Osarc200TokenReturns['arc200_decimals()uint8']
    }>
    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {
      argsObj: Osarc200TokenArgs['obj']['arc200_totalSupply()uint256']
      argsTuple: Osarc200TokenArgs['tuple']['arc200_totalSupply()uint256']
      returns: Osarc200TokenReturns['arc200_totalSupply()uint256']
    }>
    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {
      argsObj: Osarc200TokenArgs['obj']['arc200_balanceOf(address)uint256']
      argsTuple: Osarc200TokenArgs['tuple']['arc200_balanceOf(address)uint256']
      returns: Osarc200TokenReturns['arc200_balanceOf(address)uint256']
    }>
    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {
      argsObj: Osarc200TokenArgs['obj']['arc200_allowance(address,address)uint256']
      argsTuple: Osarc200TokenArgs['tuple']['arc200_allowance(address,address)uint256']
      returns: Osarc200TokenReturns['arc200_allowance(address,address)uint256']
    }>
    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {
      argsObj: Osarc200TokenArgs['obj']['arc200_transferFrom(address,address,uint256)bool']
      argsTuple: Osarc200TokenArgs['tuple']['arc200_transferFrom(address,address,uint256)bool']
      returns: Osarc200TokenReturns['arc200_transferFrom(address,address,uint256)bool']
    }>
    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {
      argsObj: Osarc200TokenArgs['obj']['arc200_transfer(address,uint256)bool']
      argsTuple: Osarc200TokenArgs['tuple']['arc200_transfer(address,uint256)bool']
      returns: Osarc200TokenReturns['arc200_transfer(address,uint256)bool']
    }>
    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {
      argsObj: Osarc200TokenArgs['obj']['arc200_approve(address,uint256)bool']
      argsTuple: Osarc200TokenArgs['tuple']['arc200_approve(address,uint256)bool']
      returns: Osarc200TokenReturns['arc200_approve(address,uint256)bool']
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: Osarc200TokenArgs['obj']['set_version(uint64,uint64)void']
      argsTuple: Osarc200TokenArgs['tuple']['set_version(uint64,uint64)void']
      returns: Osarc200TokenReturns['set_version(uint64,uint64)void']
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: Osarc200TokenArgs['obj']['approve_update(bool)void']
      argsTuple: Osarc200TokenArgs['tuple']['approve_update(bool)void']
      returns: Osarc200TokenReturns['approve_update(bool)void']
    }>
    & Record<'grant_upgrader(address)void' | 'grant_upgrader', {
      argsObj: Osarc200TokenArgs['obj']['grant_upgrader(address)void']
      argsTuple: Osarc200TokenArgs['tuple']['grant_upgrader(address)void']
      returns: Osarc200TokenReturns['grant_upgrader(address)void']
    }>
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: Osarc200TokenArgs['obj']['set_delegate(address)void']
      argsTuple: Osarc200TokenArgs['tuple']['set_delegate(address)void']
      returns: Osarc200TokenReturns['set_delegate(address)void']
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: Osarc200TokenArgs['obj']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void']
      argsTuple: Osarc200TokenArgs['tuple']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void']
      returns: Osarc200TokenReturns['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void']
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: Osarc200TokenArgs['obj']['transfer(address)void']
      argsTuple: Osarc200TokenArgs['tuple']['transfer(address)void']
      returns: Osarc200TokenReturns['transfer(address)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        contractVersion: bigint
        decimals: bigint
        delegate: BinaryState
        deployer: BinaryState
        deploymentVersion: bigint
        name: BinaryState
        owner: BinaryState
        parentId: bigint
        stakeable: bigint
        symbol: BinaryState
        totalSupply: BinaryState
        updatable: bigint
        upgrader: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Osarc200TokenSignatures = keyof Osarc200TokenTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Osarc200TokenNonVoidMethodSignatures = keyof Osarc200TokenTypes['methods'] extends infer T ? T extends keyof Osarc200TokenTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Osarc200Token smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Osarc200TokenSignatures> = Osarc200TokenTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Osarc200Token smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Osarc200TokenSignatures> = Osarc200TokenTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Osarc200TokenTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Osarc200TokenCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type Osarc200TokenUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines supported delete method params for this smart contract
 */
export type Osarc200TokenDeleteCallParams =
  | Expand<CallParams<Osarc200TokenArgs['obj']['kill()void'] | Osarc200TokenArgs['tuple']['kill()void']> & {method: 'kill'}>
  | Expand<CallParams<Osarc200TokenArgs['obj']['kill()void'] | Osarc200TokenArgs['tuple']['kill()void']> & {method: 'kill()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type Osarc200TokenDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Osarc200TokenCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: Osarc200TokenUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: Osarc200TokenDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Osarc200Token smart contract
 */
export abstract class Osarc200TokenParamsFactory {
  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends Osarc200TokenDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'kill':
          case 'kill()void':
            return Osarc200TokenParamsFactory.delete.kill(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the OSARC200Token smart contract using the kill()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      kill(params: CallParams<Osarc200TokenArgs['obj']['kill()void'] | Osarc200TokenArgs['tuple']['kill()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'kill()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mint(address,byte[32],byte[8],uint8,uint256)void ABI method
   *
   * Mint tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mint(params: CallParams<Osarc200TokenArgs['obj']['mint(address,byte[32],byte[8],uint8,uint256)void'] | Osarc200TokenArgs['tuple']['mint(address,byte[32],byte[8],uint8,uint256)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint(address,byte[32],byte[8],uint8,uint256)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.receiver, params.args.name, params.args.symbol, params.args.decimals, params.args.totalSupply],
    }
  }
  /**
   * Constructs a no op call for the arc200_name()byte[32] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Name(params: CallParams<Osarc200TokenArgs['obj']['arc200_name()byte[32]'] | Osarc200TokenArgs['tuple']['arc200_name()byte[32]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_name()byte[32]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_symbol()byte[8] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Symbol(params: CallParams<Osarc200TokenArgs['obj']['arc200_symbol()byte[8]'] | Osarc200TokenArgs['tuple']['arc200_symbol()byte[8]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_symbol()byte[8]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Decimals(params: CallParams<Osarc200TokenArgs['obj']['arc200_decimals()uint8'] | Osarc200TokenArgs['tuple']['arc200_decimals()uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_decimals()uint8' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TotalSupply(params: CallParams<Osarc200TokenArgs['obj']['arc200_totalSupply()uint256'] | Osarc200TokenArgs['tuple']['arc200_totalSupply()uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_totalSupply()uint256' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200BalanceOf(params: CallParams<Osarc200TokenArgs['obj']['arc200_balanceOf(address)uint256'] | Osarc200TokenArgs['tuple']['arc200_balanceOf(address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_balanceOf(address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Allowance(params: CallParams<Osarc200TokenArgs['obj']['arc200_allowance(address,address)uint256'] | Osarc200TokenArgs['tuple']['arc200_allowance(address,address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_allowance(address,address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.spender],
    }
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TransferFrom(params: CallParams<Osarc200TokenArgs['obj']['arc200_transferFrom(address,address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transferFrom(address,address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.recipient, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Transfer(params: CallParams<Osarc200TokenArgs['obj']['arc200_transfer(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transfer(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transfer(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipient, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Approve(params: CallParams<Osarc200TokenArgs['obj']['arc200_approve(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_approve(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_approve(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.spender, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setVersion(params: CallParams<Osarc200TokenArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenArgs['tuple']['set_version(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_version(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contractVersion, params.args.deploymentVersion],
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveUpdate(params: CallParams<Osarc200TokenArgs['obj']['approve_update(bool)void'] | Osarc200TokenArgs['tuple']['approve_update(bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approve_update(bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.approval],
    }
  }
  /**
   * Constructs a no op call for the grant_upgrader(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static grantUpgrader(params: CallParams<Osarc200TokenArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenArgs['tuple']['grant_upgrader(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'grant_upgrader(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.upgrader],
    }
  }
  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setDelegate(params: CallParams<Osarc200TokenArgs['obj']['set_delegate(address)void'] | Osarc200TokenArgs['tuple']['set_delegate(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_delegate(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.delegate],
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static participate(params: CallParams<Osarc200TokenArgs['obj']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'] | Osarc200TokenArgs['tuple']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voteK, params.args.selK, params.args.voteFst, params.args.voteLst, params.args.voteKd, params.args.spKey],
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transfer(params: CallParams<Osarc200TokenArgs['obj']['transfer(address)void'] | Osarc200TokenArgs['tuple']['transfer(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transfer(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OSARC200Token smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Osarc200TokenFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Osarc200TokenFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Osarc200TokenClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Osarc200TokenClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OSARC200Token smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Osarc200TokenDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      deleteParams: params.deleteParams?.method ? Osarc200TokenParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (Osarc200TokenDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Osarc200TokenClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OSARC200Token smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the OSARC200Token smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the OSARC200Token smart contract using the kill()void ABI method.
       *
       * Kill contract
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      kill: (params: CallParams<Osarc200TokenArgs['obj']['kill()void'] | Osarc200TokenArgs['tuple']['kill()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(Osarc200TokenParamsFactory.delete.kill(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OSARC200Token smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OSARC200Token smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new Osarc200TokenClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OSARC200Token smart contract
 */
export class Osarc200TokenClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Osarc200TokenClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Osarc200Token app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Osarc200TokenClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Osarc200TokenNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Osarc200TokenClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Osarc200TokenClient> {
    return new Osarc200TokenClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Osarc200TokenClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Osarc200TokenClient> {
    return new Osarc200TokenClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the OSARC200Token smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OSARC200Token smart contract using the `kill()void` ABI method.
       *
       * Kill contract
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      kill: (params: CallParams<Osarc200TokenArgs['obj']['kill()void'] | Osarc200TokenArgs['tuple']['kill()void']> = {args: []}) => {
        return this.appClient.params.delete(Osarc200TokenParamsFactory.delete.kill(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OSARC200Token smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `mint(address,byte[32],byte[8],uint8,uint256)void` ABI method.
     *
     * Mint tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mint: (params: CallParams<Osarc200TokenArgs['obj']['mint(address,byte[32],byte[8],uint8,uint256)void'] | Osarc200TokenArgs['tuple']['mint(address,byte[32],byte[8],uint8,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.mint(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Name: (params: CallParams<Osarc200TokenArgs['obj']['arc200_name()byte[32]'] | Osarc200TokenArgs['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Symbol: (params: CallParams<Osarc200TokenArgs['obj']['arc200_symbol()byte[8]'] | Osarc200TokenArgs['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Decimals: (params: CallParams<Osarc200TokenArgs['obj']['arc200_decimals()uint8'] | Osarc200TokenArgs['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200TotalSupply: (params: CallParams<Osarc200TokenArgs['obj']['arc200_totalSupply()uint256'] | Osarc200TokenArgs['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200BalanceOf: (params: CallParams<Osarc200TokenArgs['obj']['arc200_balanceOf(address)uint256'] | Osarc200TokenArgs['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Allowance: (params: CallParams<Osarc200TokenArgs['obj']['arc200_allowance(address,address)uint256'] | Osarc200TokenArgs['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.arc200Allowance(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200TransferFrom: (params: CallParams<Osarc200TokenArgs['obj']['arc200_transferFrom(address,address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Transfer: (params: CallParams<Osarc200TokenArgs['obj']['arc200_transfer(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Approve: (params: CallParams<Osarc200TokenArgs['obj']['arc200_approve(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `set_version(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setVersion: (params: CallParams<Osarc200TokenArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenArgs['tuple']['set_version(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.setVersion(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `approve_update(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveUpdate: (params: CallParams<Osarc200TokenArgs['obj']['approve_update(bool)void'] | Osarc200TokenArgs['tuple']['approve_update(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.approveUpdate(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `grant_upgrader(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    grantUpgrader: (params: CallParams<Osarc200TokenArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenArgs['tuple']['grant_upgrader(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.grantUpgrader(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `set_delegate(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setDelegate: (params: CallParams<Osarc200TokenArgs['obj']['set_delegate(address)void'] | Osarc200TokenArgs['tuple']['set_delegate(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.setDelegate(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    participate: (params: CallParams<Osarc200TokenArgs['obj']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'] | Osarc200TokenArgs['tuple']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.participate(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `transfer(address)void` ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transfer: (params: CallParams<Osarc200TokenArgs['obj']['transfer(address)void'] | Osarc200TokenArgs['tuple']['transfer(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenParamsFactory.transfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the OSARC200Token smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OSARC200Token smart contract using the `kill()void` ABI method.
       *
       * Kill contract
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      kill: (params: CallParams<Osarc200TokenArgs['obj']['kill()void'] | Osarc200TokenArgs['tuple']['kill()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(Osarc200TokenParamsFactory.delete.kill(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OSARC200Token smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `mint(address,byte[32],byte[8],uint8,uint256)void` ABI method.
     *
     * Mint tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mint: (params: CallParams<Osarc200TokenArgs['obj']['mint(address,byte[32],byte[8],uint8,uint256)void'] | Osarc200TokenArgs['tuple']['mint(address,byte[32],byte[8],uint8,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.mint(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Name: (params: CallParams<Osarc200TokenArgs['obj']['arc200_name()byte[32]'] | Osarc200TokenArgs['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Symbol: (params: CallParams<Osarc200TokenArgs['obj']['arc200_symbol()byte[8]'] | Osarc200TokenArgs['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Decimals: (params: CallParams<Osarc200TokenArgs['obj']['arc200_decimals()uint8'] | Osarc200TokenArgs['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200TotalSupply: (params: CallParams<Osarc200TokenArgs['obj']['arc200_totalSupply()uint256'] | Osarc200TokenArgs['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200BalanceOf: (params: CallParams<Osarc200TokenArgs['obj']['arc200_balanceOf(address)uint256'] | Osarc200TokenArgs['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Allowance: (params: CallParams<Osarc200TokenArgs['obj']['arc200_allowance(address,address)uint256'] | Osarc200TokenArgs['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.arc200Allowance(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200TransferFrom: (params: CallParams<Osarc200TokenArgs['obj']['arc200_transferFrom(address,address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Transfer: (params: CallParams<Osarc200TokenArgs['obj']['arc200_transfer(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Approve: (params: CallParams<Osarc200TokenArgs['obj']['arc200_approve(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `set_version(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setVersion: (params: CallParams<Osarc200TokenArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenArgs['tuple']['set_version(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.setVersion(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `approve_update(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveUpdate: (params: CallParams<Osarc200TokenArgs['obj']['approve_update(bool)void'] | Osarc200TokenArgs['tuple']['approve_update(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.approveUpdate(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `grant_upgrader(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    grantUpgrader: (params: CallParams<Osarc200TokenArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenArgs['tuple']['grant_upgrader(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.grantUpgrader(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `set_delegate(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setDelegate: (params: CallParams<Osarc200TokenArgs['obj']['set_delegate(address)void'] | Osarc200TokenArgs['tuple']['set_delegate(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.setDelegate(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    participate: (params: CallParams<Osarc200TokenArgs['obj']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'] | Osarc200TokenArgs['tuple']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.participate(params))
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `transfer(address)void` ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transfer: (params: CallParams<Osarc200TokenArgs['obj']['transfer(address)void'] | Osarc200TokenArgs['tuple']['transfer(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenParamsFactory.transfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the OSARC200Token smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OSARC200Token smart contract using the `kill()void` ABI method.
       *
       * Kill contract
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      kill: async (params: CallParams<Osarc200TokenArgs['obj']['kill()void'] | Osarc200TokenArgs['tuple']['kill()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(Osarc200TokenParamsFactory.delete.kill(params))
        return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['kill()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OSARC200Token smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `mint(address,byte[32],byte[8],uint8,uint256)void` ABI method.
     *
     * Mint tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mint: async (params: CallParams<Osarc200TokenArgs['obj']['mint(address,byte[32],byte[8],uint8,uint256)void'] | Osarc200TokenArgs['tuple']['mint(address,byte[32],byte[8],uint8,uint256)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.mint(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['mint(address,byte[32],byte[8],uint8,uint256)void'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Name: async (params: CallParams<Osarc200TokenArgs['obj']['arc200_name()byte[32]'] | Osarc200TokenArgs['tuple']['arc200_name()byte[32]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Name(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['arc200_name()byte[32]'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Symbol: async (params: CallParams<Osarc200TokenArgs['obj']['arc200_symbol()byte[8]'] | Osarc200TokenArgs['tuple']['arc200_symbol()byte[8]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Symbol(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['arc200_symbol()byte[8]'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Decimals: async (params: CallParams<Osarc200TokenArgs['obj']['arc200_decimals()uint8'] | Osarc200TokenArgs['tuple']['arc200_decimals()uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Decimals(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['arc200_decimals()uint8'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200TotalSupply: async (params: CallParams<Osarc200TokenArgs['obj']['arc200_totalSupply()uint256'] | Osarc200TokenArgs['tuple']['arc200_totalSupply()uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200TotalSupply(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['arc200_totalSupply()uint256'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200BalanceOf: async (params: CallParams<Osarc200TokenArgs['obj']['arc200_balanceOf(address)uint256'] | Osarc200TokenArgs['tuple']['arc200_balanceOf(address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['arc200_balanceOf(address)uint256'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Allowance: async (params: CallParams<Osarc200TokenArgs['obj']['arc200_allowance(address,address)uint256'] | Osarc200TokenArgs['tuple']['arc200_allowance(address,address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Allowance(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['arc200_allowance(address,address)uint256'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200TransferFrom: async (params: CallParams<Osarc200TokenArgs['obj']['arc200_transferFrom(address,address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transferFrom(address,address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200TransferFrom(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['arc200_transferFrom(address,address,uint256)bool'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Transfer: async (params: CallParams<Osarc200TokenArgs['obj']['arc200_transfer(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transfer(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['arc200_transfer(address,uint256)bool'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Approve: async (params: CallParams<Osarc200TokenArgs['obj']['arc200_approve(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_approve(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Approve(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['arc200_approve(address,uint256)bool'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `set_version(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setVersion: async (params: CallParams<Osarc200TokenArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenArgs['tuple']['set_version(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.setVersion(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['set_version(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `approve_update(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveUpdate: async (params: CallParams<Osarc200TokenArgs['obj']['approve_update(bool)void'] | Osarc200TokenArgs['tuple']['approve_update(bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.approveUpdate(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['approve_update(bool)void'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `grant_upgrader(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    grantUpgrader: async (params: CallParams<Osarc200TokenArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenArgs['tuple']['grant_upgrader(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.grantUpgrader(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['grant_upgrader(address)void'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `set_delegate(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setDelegate: async (params: CallParams<Osarc200TokenArgs['obj']['set_delegate(address)void'] | Osarc200TokenArgs['tuple']['set_delegate(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.setDelegate(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['set_delegate(address)void'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    participate: async (params: CallParams<Osarc200TokenArgs['obj']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'] | Osarc200TokenArgs['tuple']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.participate(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'])}
    },

    /**
     * Makes a call to the OSARC200Token smart contract using the `transfer(address)void` ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transfer: async (params: CallParams<Osarc200TokenArgs['obj']['transfer(address)void'] | Osarc200TokenArgs['tuple']['transfer(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenParamsFactory.transfer(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenReturns['transfer(address)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Osarc200TokenClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the OSARC200Token smart contract using the `arc200_name()byte[32]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc200Name(params: CallParams<Osarc200TokenArgs['obj']['arc200_name()byte[32]'] | Osarc200TokenArgs['tuple']['arc200_name()byte[32]']> = {args: []}) {
    const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Name(params))
    return result.return as unknown as Osarc200TokenReturns['arc200_name()byte[32]']
  }

  /**
   * Makes a readonly (simulated) call to the OSARC200Token smart contract using the `arc200_symbol()byte[8]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc200Symbol(params: CallParams<Osarc200TokenArgs['obj']['arc200_symbol()byte[8]'] | Osarc200TokenArgs['tuple']['arc200_symbol()byte[8]']> = {args: []}) {
    const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Symbol(params))
    return result.return as unknown as Osarc200TokenReturns['arc200_symbol()byte[8]']
  }

  /**
   * Makes a readonly (simulated) call to the OSARC200Token smart contract using the `arc200_decimals()uint8` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc200Decimals(params: CallParams<Osarc200TokenArgs['obj']['arc200_decimals()uint8'] | Osarc200TokenArgs['tuple']['arc200_decimals()uint8']> = {args: []}) {
    const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Decimals(params))
    return result.return as unknown as Osarc200TokenReturns['arc200_decimals()uint8']
  }

  /**
   * Makes a readonly (simulated) call to the OSARC200Token smart contract using the `arc200_totalSupply()uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc200TotalSupply(params: CallParams<Osarc200TokenArgs['obj']['arc200_totalSupply()uint256'] | Osarc200TokenArgs['tuple']['arc200_totalSupply()uint256']> = {args: []}) {
    const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200TotalSupply(params))
    return result.return as unknown as Osarc200TokenReturns['arc200_totalSupply()uint256']
  }

  /**
   * Makes a readonly (simulated) call to the OSARC200Token smart contract using the `arc200_balanceOf(address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc200BalanceOf(params: CallParams<Osarc200TokenArgs['obj']['arc200_balanceOf(address)uint256'] | Osarc200TokenArgs['tuple']['arc200_balanceOf(address)uint256']>) {
    const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200BalanceOf(params))
    return result.return as unknown as Osarc200TokenReturns['arc200_balanceOf(address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the OSARC200Token smart contract using the `arc200_allowance(address,address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc200Allowance(params: CallParams<Osarc200TokenArgs['obj']['arc200_allowance(address,address)uint256'] | Osarc200TokenArgs['tuple']['arc200_allowance(address,address)uint256']>) {
    const result = await this.appClient.send.call(Osarc200TokenParamsFactory.arc200Allowance(params))
    return result.return as unknown as Osarc200TokenReturns['arc200_allowance(address,address)uint256']
  }

  /**
   * Methods to access state for the current OSARC200Token app
   */
  state = {
    /**
     * Methods to access global state for the current OSARC200Token app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          contractVersion: result.contract_version,
          decimals: result.decimals,
          delegate: new BinaryStateValue(result.delegate),
          deployer: new BinaryStateValue(result.deployer),
          deploymentVersion: result.deployment_version,
          name: new BinaryStateValue(result.name),
          owner: new BinaryStateValue(result.owner),
          parentId: result.parent_id,
          stakeable: result.stakeable,
          symbol: new BinaryStateValue(result.symbol),
          totalSupply: new BinaryStateValue(result.totalSupply),
          updatable: result.updatable,
          upgrader: new BinaryStateValue(result.upgrader),
        }
      },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contractVersion")) as bigint | undefined },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("decimals")) as bigint | undefined },
      /**
       * Get the current value of the delegate key in global state
       */
      delegate: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("delegate")) as Uint8Array | undefined) },
      /**
       * Get the current value of the deployer key in global state
       */
      deployer: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("deployer")) as Uint8Array | undefined) },
      /**
       * Get the current value of the deployment_version key in global state
       */
      deploymentVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("deploymentVersion")) as bigint | undefined },
      /**
       * Get the current value of the name key in global state
       */
      name: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("name")) as Uint8Array | undefined) },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("owner")) as Uint8Array | undefined) },
      /**
       * Get the current value of the parent_id key in global state
       */
      parentId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("parentId")) as bigint | undefined },
      /**
       * Get the current value of the stakeable key in global state
       */
      stakeable: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("stakeable")) as bigint | undefined },
      /**
       * Get the current value of the symbol key in global state
       */
      symbol: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("symbol")) as Uint8Array | undefined) },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("totalSupply")) as Uint8Array | undefined) },
      /**
       * Get the current value of the updatable key in global state
       */
      updatable: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("updatable")) as bigint | undefined },
      /**
       * Get the current value of the upgrader key in global state
       */
      upgrader: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("upgrader")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): Osarc200TokenComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a mint(address,byte[32],byte[8],uint8,uint256)void method call against the OSARC200Token contract
       */
      mint(params: CallParams<Osarc200TokenArgs['obj']['mint(address,byte[32],byte[8],uint8,uint256)void'] | Osarc200TokenArgs['tuple']['mint(address,byte[32],byte[8],uint8,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mint(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc200_name()byte[32] method call against the OSARC200Token contract
       */
      arc200Name(params: CallParams<Osarc200TokenArgs['obj']['arc200_name()byte[32]'] | Osarc200TokenArgs['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Name(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_name()byte[32]', v))
        return this
      },
      /**
       * Add a arc200_symbol()byte[8] method call against the OSARC200Token contract
       */
      arc200Symbol(params: CallParams<Osarc200TokenArgs['obj']['arc200_symbol()byte[8]'] | Osarc200TokenArgs['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Symbol(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_symbol()byte[8]', v))
        return this
      },
      /**
       * Add a arc200_decimals()uint8 method call against the OSARC200Token contract
       */
      arc200Decimals(params: CallParams<Osarc200TokenArgs['obj']['arc200_decimals()uint8'] | Osarc200TokenArgs['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Decimals(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_decimals()uint8', v))
        return this
      },
      /**
       * Add a arc200_totalSupply()uint256 method call against the OSARC200Token contract
       */
      arc200TotalSupply(params: CallParams<Osarc200TokenArgs['obj']['arc200_totalSupply()uint256'] | Osarc200TokenArgs['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TotalSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_totalSupply()uint256', v))
        return this
      },
      /**
       * Add a arc200_balanceOf(address)uint256 method call against the OSARC200Token contract
       */
      arc200BalanceOf(params: CallParams<Osarc200TokenArgs['obj']['arc200_balanceOf(address)uint256'] | Osarc200TokenArgs['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_balanceOf(address)uint256', v))
        return this
      },
      /**
       * Add a arc200_allowance(address,address)uint256 method call against the OSARC200Token contract
       */
      arc200Allowance(params: CallParams<Osarc200TokenArgs['obj']['arc200_allowance(address,address)uint256'] | Osarc200TokenArgs['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Allowance(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_allowance(address,address)uint256', v))
        return this
      },
      /**
       * Add a arc200_transferFrom(address,address,uint256)bool method call against the OSARC200Token contract
       */
      arc200TransferFrom(params: CallParams<Osarc200TokenArgs['obj']['arc200_transferFrom(address,address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TransferFrom(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transferFrom(address,address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_transfer(address,uint256)bool method call against the OSARC200Token contract
       */
      arc200Transfer(params: CallParams<Osarc200TokenArgs['obj']['arc200_transfer(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Transfer(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transfer(address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_approve(address,uint256)bool method call against the OSARC200Token contract
       */
      arc200Approve(params: CallParams<Osarc200TokenArgs['obj']['arc200_approve(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Approve(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_approve(address,uint256)bool', v))
        return this
      },
      /**
       * Add a set_version(uint64,uint64)void method call against the OSARC200Token contract
       */
      setVersion(params: CallParams<Osarc200TokenArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenArgs['tuple']['set_version(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setVersion(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a approve_update(bool)void method call against the OSARC200Token contract
       */
      approveUpdate(params: CallParams<Osarc200TokenArgs['obj']['approve_update(bool)void'] | Osarc200TokenArgs['tuple']['approve_update(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveUpdate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a grant_upgrader(address)void method call against the OSARC200Token contract
       */
      grantUpgrader(params: CallParams<Osarc200TokenArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenArgs['tuple']['grant_upgrader(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.grantUpgrader(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_delegate(address)void method call against the OSARC200Token contract
       */
      setDelegate(params: CallParams<Osarc200TokenArgs['obj']['set_delegate(address)void'] | Osarc200TokenArgs['tuple']['set_delegate(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setDelegate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void method call against the OSARC200Token contract
       */
      participate(params: CallParams<Osarc200TokenArgs['obj']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'] | Osarc200TokenArgs['tuple']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.participate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a transfer(address)void method call against the OSARC200Token contract
       */
      transfer(params: CallParams<Osarc200TokenArgs['obj']['transfer(address)void'] | Osarc200TokenArgs['tuple']['transfer(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transfer(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      get delete() {
        return {
          kill: (params: CallParams<Osarc200TokenArgs['obj']['kill()void'] | Osarc200TokenArgs['tuple']['kill()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.kill(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the OSARC200Token contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Osarc200TokenComposer
  }
}
export type Osarc200TokenComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mint(address,byte[32],byte[8],uint8,uint256)void ABI method.
   *
   * Mint tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(params?: CallParams<Osarc200TokenArgs['obj']['mint(address,byte[32],byte[8],uint8,uint256)void'] | Osarc200TokenArgs['tuple']['mint(address,byte[32],byte[8],uint8,uint256)void']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['mint(address,byte[32],byte[8],uint8,uint256)void'] | undefined]>

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(params?: CallParams<Osarc200TokenArgs['obj']['arc200_name()byte[32]'] | Osarc200TokenArgs['tuple']['arc200_name()byte[32]']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['arc200_name()byte[32]'] | undefined]>

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(params?: CallParams<Osarc200TokenArgs['obj']['arc200_symbol()byte[8]'] | Osarc200TokenArgs['tuple']['arc200_symbol()byte[8]']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['arc200_symbol()byte[8]'] | undefined]>

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(params?: CallParams<Osarc200TokenArgs['obj']['arc200_decimals()uint8'] | Osarc200TokenArgs['tuple']['arc200_decimals()uint8']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['arc200_decimals()uint8'] | undefined]>

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(params?: CallParams<Osarc200TokenArgs['obj']['arc200_totalSupply()uint256'] | Osarc200TokenArgs['tuple']['arc200_totalSupply()uint256']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['arc200_totalSupply()uint256'] | undefined]>

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(params?: CallParams<Osarc200TokenArgs['obj']['arc200_balanceOf(address)uint256'] | Osarc200TokenArgs['tuple']['arc200_balanceOf(address)uint256']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['arc200_balanceOf(address)uint256'] | undefined]>

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(params?: CallParams<Osarc200TokenArgs['obj']['arc200_allowance(address,address)uint256'] | Osarc200TokenArgs['tuple']['arc200_allowance(address,address)uint256']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['arc200_allowance(address,address)uint256'] | undefined]>

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(params?: CallParams<Osarc200TokenArgs['obj']['arc200_transferFrom(address,address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transferFrom(address,address,uint256)bool']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['arc200_transferFrom(address,address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(params?: CallParams<Osarc200TokenArgs['obj']['arc200_transfer(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_transfer(address,uint256)bool']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['arc200_transfer(address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(params?: CallParams<Osarc200TokenArgs['obj']['arc200_approve(address,uint256)bool'] | Osarc200TokenArgs['tuple']['arc200_approve(address,uint256)bool']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['arc200_approve(address,uint256)bool'] | undefined]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(params?: CallParams<Osarc200TokenArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenArgs['tuple']['set_version(uint64,uint64)void']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['set_version(uint64,uint64)void'] | undefined]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(params?: CallParams<Osarc200TokenArgs['obj']['approve_update(bool)void'] | Osarc200TokenArgs['tuple']['approve_update(bool)void']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['approve_update(bool)void'] | undefined]>

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantUpgrader(params?: CallParams<Osarc200TokenArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenArgs['tuple']['grant_upgrader(address)void']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['grant_upgrader(address)void'] | undefined]>

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(params?: CallParams<Osarc200TokenArgs['obj']['set_delegate(address)void'] | Osarc200TokenArgs['tuple']['set_delegate(address)void']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['set_delegate(address)void'] | undefined]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(params?: CallParams<Osarc200TokenArgs['obj']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'] | Osarc200TokenArgs['tuple']['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'] | undefined]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(params?: CallParams<Osarc200TokenArgs['obj']['transfer(address)void'] | Osarc200TokenArgs['tuple']['transfer(address)void']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['transfer(address)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the OSARC200Token smart contract using the kill()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    kill(params?: CallParams<Osarc200TokenArgs['obj']['kill()void'] | Osarc200TokenArgs['tuple']['kill()void']>): Osarc200TokenComposer<[...TReturns, Osarc200TokenReturns['kill()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the OSARC200Token smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Osarc200TokenComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Osarc200TokenComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Osarc200TokenComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Osarc200TokenComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Osarc200TokenComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Osarc200TokenComposerResults<TReturns>>
}
export type Osarc200TokenComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

