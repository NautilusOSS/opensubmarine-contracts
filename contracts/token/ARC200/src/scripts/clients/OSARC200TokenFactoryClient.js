/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import { AtomicTransactionComposer, modelsv2 } from 'algosdk';
export const APP_SPEC = {
    "hints": {
        "create()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_version(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_update(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "grant_upgrader(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5PU0FSQzIwMFRva2VuRmFjdG9yeS5hcHByb3ZhbF9wcm9ncmFtOgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2VudHJ5cG9pbnRAMgogICAgY2FsbHN1YiBfX2luaXRfXwoKbWFpbl9lbnRyeXBvaW50QDI6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY1NAogICAgLy8gY2xhc3MgT1NBUkMyMDBUb2tlbkZhY3RvcnkoQmFzZUZhY3RvcnkpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDExCiAgICBtZXRob2QgImNyZWF0ZSgpdWludDY0IgogICAgbWV0aG9kICJzZXRfdmVyc2lvbih1aW50NjQsdWludDY0KXZvaWQiCiAgICBtZXRob2QgImFwcHJvdmVfdXBkYXRlKGJvb2wpdm9pZCIKICAgIG1ldGhvZCAiZ3JhbnRfdXBncmFkZXIoYWRkcmVzcyl2b2lkIgogICAgbWV0aG9kICJ0cmFuc2ZlcihhZGRyZXNzKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZV9yb3V0ZUA0IG1haW5fc2V0X3ZlcnNpb25fcm91dGVANSBtYWluX2FwcHJvdmVfdXBkYXRlX3JvdXRlQDYgbWFpbl9ncmFudF91cGdyYWRlcl9yb3V0ZUA3IG1haW5fdHJhbnNmZXJfcm91dGVAOAogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9jcmVhdGVfcm91dGVANDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjU4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgY3JlYXRlCiAgICBpdG9iCiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3NldF92ZXJzaW9uX3JvdXRlQDU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI4NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY1NAogICAgLy8gY2xhc3MgT1NBUkMyMDBUb2tlbkZhY3RvcnkoQmFzZUZhY3RvcnkpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyODUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRfdmVyc2lvbgogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hcHByb3ZlX3VwZGF0ZV9yb3V0ZUA2OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMDMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTQKICAgIC8vIGNsYXNzIE9TQVJDMjAwVG9rZW5GYWN0b3J5KEJhc2VGYWN0b3J5KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzAzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgYXBwcm92ZV91cGRhdGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fZ3JhbnRfdXBncmFkZXJfcm91dGVANzoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzA5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjU0CiAgICAvLyBjbGFzcyBPU0FSQzIwMFRva2VuRmFjdG9yeShCYXNlRmFjdG9yeSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMwOQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGdyYW50X3VwZ3JhZGVyCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3RyYW5zZmVyX3JvdXRlQDg6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojc4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDExOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTQKICAgIC8vIGNsYXNzIE9TQVJDMjAwVG9rZW5GYWN0b3J5KEJhc2VGYWN0b3J5KToKICAgIGludCAwCiAgICBpbnQgNAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgbWF0Y2ggbWFpbl9jcmVhdGVAMTIgbWFpbl9vbl91cGRhdGVAMTMKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCm1haW5fY3JlYXRlQDEyOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTQKICAgIC8vIGNsYXNzIE9TQVJDMjAwVG9rZW5GYWN0b3J5KEJhc2VGYWN0b3J5KToKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fb25fdXBkYXRlQDEzOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyOTQKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bIlVwZGF0ZUFwcGxpY2F0aW9uIl0pCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyOTQtMjk1CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgLy8gZGVmIG9uX3VwZGF0ZShzZWxmKSAtPiBOb25lOgogICAgY2FsbHN1YiBvbl91cGRhdGUKICAgIGludCAxCiAgICByZXR1cm4KCgovLyBjb250cmFjdC5PU0FSQzIwMFRva2VuRmFjdG9yeS5jcmVhdGUoKSAtPiB1aW50NjQ6CmNyZWF0ZToKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjU4LTY2NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgY3JlYXRlKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgIyBuYW1lOiBCeXRlczMyLAogICAgLy8gICAgICMgc3ltYm9sOiBCeXRlczgsCiAgICAvLyAgICAgIyBkZWNpbWFsczogYXJjNC5VSW50OCwKICAgIC8vICAgICAjIHRvdGFsU3VwcGx5OiBhcmM0LlVJbnQyNTYsCiAgICAvLyApIC0+IFVJbnQ2NDoKICAgIHByb3RvIDAgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NzgtNjc5CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYuZ2V0X2luaXRpYWxfcGF5bWVudCgpCiAgICBjYWxsc3ViIGdldF9pbml0aWFsX3BheW1lbnQKICAgIHBvcAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2ODQKICAgIC8vIGJhc2VfYXBwID0gYXJjNC5hcmM0X2NyZWF0ZShPU0FSQzIwMFRva2VuLCBjb21waWxlZD1jb21waWxlZCkuY3JlYXRlZF9hcHAKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjgwLTY4MwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBjb21waWxlZCA9IGNvbXBpbGVfY29udHJhY3QoCiAgICAvLyAgICAgT1NBUkMyMDBUb2tlbiwgZXh0cmFfcHJvZ3JhbV9wYWdlcz0zCiAgICAvLyApICAjIG1heCBleHRyYSBwYWdlcwogICAgaW50IDYKICAgIGl0eG5fZmllbGQgR2xvYmFsTnVtVWludAogICAgaW50IDcKICAgIGl0eG5fZmllbGQgR2xvYmFsTnVtQnl0ZVNsaWNlCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY4MgogICAgLy8gT1NBUkMyMDBUb2tlbiwgZXh0cmFfcHJvZ3JhbV9wYWdlcz0zCiAgICBpbnQgMwogICAgaXR4bl9maWVsZCBFeHRyYVByb2dyYW1QYWdlcwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2ODAtNjgzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGNvbXBpbGVkID0gY29tcGlsZV9jb250cmFjdCgKICAgIC8vICAgICBPU0FSQzIwMFRva2VuLCBleHRyYV9wcm9ncmFtX3BhZ2VzPTMKICAgIC8vICkgICMgbWF4IGV4dHJhIHBhZ2VzCiAgICBieXRlIGJhc2U2NCBDb0VCUXc9PQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBieXRlIGJhc2U2NCBDaUFHQUFFZ0JjQ0VQUUltRWdRVkgzeDFBQVZ2ZDI1bGNnaDFjR2R5WVdSbGNnUnVZVzFsQm5ONWJXSnZiQXQwYjNSaGJGTjFjSEJzZVFoaVlXeGhibU5sY3doa1pXeGxaMkYwWlFoa1pXTnBiV0ZzY3dHQUNYVndaR0YwWVdKc1pRUjVnOE5jSUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDV0Z3Y0hKdmRtRnNjeEJqYjI1MGNtRmpkRjkyWlhKemFXOXVFbVJsY0d4dmVXMWxiblJmZG1WeWMybHZiZ2x3WVhKbGJuUmZhV1F4R0VBQUE0Z0ZYREViUVFHN2doRUU5eU15aGdTNXdoRlZCR1Y5RSt3RXRxNGFKUVNFN0JQVkJPeVpZRUVFZ3VWenhBUzdzeG56QkVxV2o0OEUybkFsdVFTMVFpRWxCSGk4bWRRRWF3dVArQVRVbHI5REJGOStva2dFelNUZWlBU3QrU3JrTmhvQWpoRUFBUUFjQUNrQU9RQkpBRmtBYVFCOEFKSUFxd0RCQU5jQTZRRDRBUWNCRmdFMEFERVpGRVF4R0VRMkdnRTJHZ0kyR2dNMkdnUTJHZ1dJQVVBalF6RVpKUkpFTVJoRWlBSENJME14R1JSRU1SaEVpQUpFS0V4UXNDTkRNUmtVUkRFWVJJZ0NQU2hNVUxBalF6RVpGRVF4R0VTSUFqWW9URkN3STBNeEdSUkVNUmhFaUFJektFeFFzQ05ETVJrVVJERVlSRFlhQVlnQ01TaE1VTEFqUXpFWkZFUXhHRVEyR2dFMkdnS0lBam9vVEZDd0kwTXhHUlJFTVJoRU5ob0JOaG9DTmhvRGlBSkhLRXhRc0NORE1Sa1VSREVZUkRZYUFUWWFBb2dDMkNoTVVMQWpRekVaRkVReEdFUTJHZ0UyR2dLSUF0RW9URkN3STBNeEdSUkVNUmhFTmhvQk5ob0NpQUxLSTBNeEdSUkVNUmhFTmhvQmlBTGpJME14R1JSRU1SaEVOaG9CaUFMNEkwTXhHUlJFTVJoRU5ob0JpQU1ISTBNeEdSUkVNUmhFTmhvQk5ob0NOaG9ETmhvRU5ob0ZOaG9HaUFNYkkwTXhHUlJFTVJoRUkwTWlnUVF4R1k0Q0FBRUFDZ0F4R0JSRWlBTnBJME14R0VTSUEyMGpRNG9GQUNJcVpVUXlBeEpFSWljRVpVUXBFa1FpSndWbFJDa1NSQ0luQm1WRUthaEVNUUNJQUVjaEJBOUVLaklKWnljRWkveG5Kd1dML1dlTC9oY25DVXhuSndhTC8yY25CNHY3VUVtOFNJdi92eklEaS90UWkvOVFKd3hNVUxDeE1na2hCTElJc2djanNoQWlzZ0d6aVlvQkFURVdTVVFqQ1VrNEVDTVNSRWs0QUl2L0VrUkpPQWN5Q2hKRU9BaUppZ0FBTVFBaUsyVkVFa1F4QUlnQUFZbUtBUUF4R1NVU1JESUpNZ0d4Z0VBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXNqOGlzZzRpc2cwaXNnd25EYklMSncyeUNpT3lPU0VGc2hBaXNnRzJzZ2lMLzdJSnNnY2pzaEFpc2dHemlZb0FBU0luQkdWRWlZb0FBU0luQldWRWlZb0FBU0luQ1dWRUZsY0hBWW1LQUFFaUp3WmxSRWtWSkE1RUpLK3JpWW9CQVl2L2lBQUpTUlVrRGtRa3I2dUppZ0VCSndlTC8xQytLVTRDVFltS0FnR0wvb3YvaUFBSlNSVWtEa1FrcjZ1SmlnSUJpLzZMLzFBQkp3NU1VTDRwVGdKTmlZb0RBWXY5aS82TC80Z0FBeWNLaVlvREFERUFpLzFMQVlqLzBrbUwvNmRFaS8raGkvMU9Bb2dBQ292OWkvNkwvNGdBSzRtS0F3Q0wvWXYrVUVrQkp3NU1VRW04U0l2L3Y0di9GU1FPUkNTdmkvK3JVSUFFR1duNFpVeFFzSW1LQXdDTC9Zai9ab3YraVA5aFRFbUwvNmRFSndlTC9WQk1pLytoVEVtOFNFeS9Kd2VML2xCTWkvK2dURW04U0V5L2kvOFZKQTVFSksrTC82dUwvWXYrVUV4UUp3eE1VTENKaWdJQk1RQ0wvb3YvaVArckp3cUppZ0lCTVFDTC9vdi9pUDl5SndxSmlnSUFNUUFpSzJWRUVrU0wvb3YvVUlBRWpJejV6VXhRc0l2K0Z5Y1BUR2VML3hjbkVFeG5pWW9CQURFQUlpcGxSQkpFSWlwbFJJdi9VSUFFd25sbGkweFFzSXYvSWxNbkMweG5pWW9CQURFQU1na1NSQ0lyWlVTTC8xQ0FCSzMxNHJoTVVMQXJpLzluaVlvQkFERUFJaXBsUkJKQUFBZ3hBRElKRWtFQUJDTkNBQUVpUkNJbkNHVkVpLzlRZ0FSNFpsVjNURkN3SndpTC8yZUppZ1lBTVFBaUttVkVFa0FBQ3pFQUlpY0laVVFTUVFBRUkwSUFBU0pFTWdBeEFJajlWMHNCRWtReEFFbUwrbENMKzFDTC9GQ0wvVkNML2xDTC8xQlFnQVJ0UkpBL1RGQ3dzWXY4RjR2OUY0ditGNHYvc2oreURySU5zZ3lMKzdJTGkvcXlDaUVGc2hDeUFiT0ppZ0FBTWcxSlJDY1JUR2VKaWdBQU1RQWlLMlZFRWtRaUp3dGxSQ01TUkltS0FBQW5CQ2xuSndVcFp5Y0pJbWNuQmlsbkp4RWlaNEFJWkdWd2JHOTVaWEl5QTJjcU1nTm5KdzhpWnljUUltY25DeU5uS3pJSlp5Y0lNZ05uZ0FsemRHRnJaV0ZpYkdValo0az0KICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6Njg0CiAgICAvLyBiYXNlX2FwcCA9IGFyYzQuYXJjNF9jcmVhdGUoT1NBUkMyMDBUb2tlbiwgY29tcGlsZWQ9Y29tcGlsZWQpLmNyZWF0ZWRfYXBwCiAgICBpbnQgYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBDcmVhdGVkQXBwbGljYXRpb25JRAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2ODUKICAgIC8vIGFyYzQuZW1pdChGYWN0b3J5Q3JlYXRlZChhcmM0LlVJbnQ2NChiYXNlX2FwcC5pZCkpKQogICAgZHVwCiAgICBpdG9iCiAgICBtZXRob2QgIkZhY3RvcnlDcmVhdGVkKHVpbnQ2NCkiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2ODYtNjkwCiAgICAvLyBhcmM0LmFiaV9jYWxsKCAgIyBpbmhlcml0IHVwZ3JhZGVyCiAgICAvLyAgICAgT1NBUkMyMDBUb2tlbi5ncmFudF91cGdyYWRlciwKICAgIC8vICAgICBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgLy8gICAgIGFwcF9pZD1iYXNlX2FwcCwKICAgIC8vICkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6Njg4CiAgICAvLyBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICBkaWcgMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY4Ni02OTAKICAgIC8vIGFyYzQuYWJpX2NhbGwoICAjIGluaGVyaXQgdXBncmFkZXIKICAgIC8vICAgICBPU0FSQzIwMFRva2VuLmdyYW50X3VwZ3JhZGVyLAogICAgLy8gICAgIEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsCiAgICAvLyAgICAgYXBwX2lkPWJhc2VfYXBwLAogICAgLy8gKQogICAgbWV0aG9kICJncmFudF91cGdyYWRlcihhZGRyZXNzKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludCBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY5MS02OTMKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1iYXNlX2FwcC5hZGRyZXNzLCBhbW91bnQ9b3AuR2xvYmFsLm1pbl9iYWxhbmNlICsgMzEzMDAsIGZlZT0wCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY5MgogICAgLy8gcmVjZWl2ZXI9YmFzZV9hcHAuYWRkcmVzcywgYW1vdW50PW9wLkdsb2JhbC5taW5fYmFsYW5jZSArIDMxMzAwLCBmZWU9MAogICAgZHVwCiAgICBhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCiAgICBhc3NlcnQgLy8gYXBwbGljYXRpb24gZXhpc3RzCiAgICBnbG9iYWwgTWluQmFsYW5jZQogICAgaW50IDMxMzAwCiAgICArCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2OTEKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIGludCBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjkyCiAgICAvLyByZWNlaXZlcj1iYXNlX2FwcC5hZGRyZXNzLCBhbW91bnQ9b3AuR2xvYmFsLm1pbl9iYWxhbmNlICsgMzEzMDAsIGZlZT0wCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjkxLTY5MwogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPWJhc2VfYXBwLmFkZHJlc3MsIGFtb3VudD1vcC5HbG9iYWwubWluX2JhbGFuY2UgKyAzMTMwMCwgZmVlPTAKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY5NC02OTUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gcmV0dXJuIGJhc2VfYXBwLmlkCiAgICByZXRzdWIKCgovLyBjb250cmFjdC5CYXNlRmFjdG9yeS5nZXRfaW5pdGlhbF9wYXltZW50KCkgLT4gdWludDY0OgpnZXRfaW5pdGlhbF9wYXltZW50OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MzYtNjM3CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGdldF9pbml0aWFsX3BheW1lbnQoc2VsZikgLT4gVUludDY0OgogICAgcHJvdG8gMCAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY0MQogICAgLy8gcGF5bWVudF9hbW91bnQgPSByZXF1aXJlX3BheW1lbnQoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIGNhbGxzdWIgcmVxdWlyZV9wYXltZW50CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY0MwogICAgLy8gbWluX2JhbGFuY2UgPSBvcC5HbG9iYWwubWluX2JhbGFuY2UgICMgMTAwMDAwCiAgICBnbG9iYWwgTWluQmFsYW5jZQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NDIKICAgIC8vIG1icl9pbmNyZWFzZSA9IFVJbnQ2NChtaW50X2Nvc3QpCiAgICBpbnQgMzEzMDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjQ1CiAgICAvLyBwYXltZW50X2Ftb3VudCA+PSBtYnJfaW5jcmVhc2UgKyBtaW5fYmFsYW5jZQogICAgZGlnIDEKICAgICsKICAgIGRpZyAyCiAgICA8PQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NDQtNjQ2CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHBheW1lbnRfYW1vdW50ID49IG1icl9pbmNyZWFzZSArIG1pbl9iYWxhbmNlCiAgICAvLyApLCAicGF5bWVudCBhbW91bnQgYWNjdXJhdGUiICAjIDEzMTMwMAogICAgYXNzZXJ0IC8vIHBheW1lbnQgYW1vdW50IGFjY3VyYXRlCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY0NwogICAgLy8gaW5pdGlhbCA9IHBheW1lbnRfYW1vdW50IC0gbWJyX2luY3JlYXNlIC0gbWluX2JhbGFuY2UKICAgIHN3YXAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjQyCiAgICAvLyBtYnJfaW5jcmVhc2UgPSBVSW50NjQobWludF9jb3N0KQogICAgaW50IDMxMzAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY0NwogICAgLy8gaW5pdGlhbCA9IHBheW1lbnRfYW1vdW50IC0gbWJyX2luY3JlYXNlIC0gbWluX2JhbGFuY2UKICAgIC0KICAgIHN3YXAKICAgIC0KICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjQ4CiAgICAvLyByZXR1cm4gaW5pdGlhbAogICAgcmV0c3ViCgoKLy8gdXRpbHMucmVxdWlyZV9wYXltZW50KHdobzogYnl0ZXMpIC0+IHVpbnQ2NDoKcmVxdWlyZV9wYXltZW50OgogICAgLy8gc3JjL3NyYy91dGlscy5weToxNS0yMwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogcmVxdWlyZV9wYXltZW50IChpbnRlcm5hbCkKICAgIC8vICMgYXJndW1lbnRzOiBOb25lCiAgICAvLyAjIHB1cnBvc2U6IGNoZWNrIHBheW1lbnQKICAgIC8vICMgcHJlLWNvbmRpdGlvbnM6IE5vbmUKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOiBOb25lCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIHJlcXVpcmVfcGF5bWVudCh3aG86IEFjY291bnQpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgLy8gc3JjL3NyYy91dGlscy5weToyNAogICAgLy8gcmVmX2dyb3VwX2luZGV4ID0gVHhuLmdyb3VwX2luZGV4CiAgICB0eG4gR3JvdXBJbmRleAogICAgLy8gc3JjL3NyYy91dGlscy5weToyNQogICAgLy8gYXNzZXJ0IHJlZl9ncm91cF9pbmRleCA+IDAsICJncm91cCBpbmRleCBncmVhdGVyIHRoYW4gemVybyIKICAgIGR1cAogICAgYXNzZXJ0IC8vIGdyb3VwIGluZGV4IGdyZWF0ZXIgdGhhbiB6ZXJvCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjI2CiAgICAvLyBwYXltZW50X2dyb3VwX2luZGV4ID0gcmVmX2dyb3VwX2luZGV4IC0gMQogICAgaW50IDEKICAgIC0KICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6MjgKICAgIC8vIGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKHBheW1lbnRfZ3JvdXBfaW5kZXgpLnNlbmRlciA9PSB3aG8KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIGR1cAogICAgZ3R4bnMgU2VuZGVyCiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjI3LTI5CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKHBheW1lbnRfZ3JvdXBfaW5kZXgpLnNlbmRlciA9PSB3aG8KICAgIC8vICksICJwYXltZW50IHNlbmRlciBhY2N1cmF0ZSIKICAgIGFzc2VydCAvLyBwYXltZW50IHNlbmRlciBhY2N1cmF0ZQogICAgLy8gc3JjL3NyYy91dGlscy5weTozMQogICAgLy8gZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24ocGF5bWVudF9ncm91cF9pbmRleCkucmVjZWl2ZXIKICAgIGR1cAogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6MzIKICAgIC8vID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjMxLTMyCiAgICAvLyBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5yZWNlaXZlcgogICAgLy8gPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgPT0KICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6MzAtMzMKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24ocGF5bWVudF9ncm91cF9pbmRleCkucmVjZWl2ZXIKICAgIC8vICAgICA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICAvLyApLCAicGF5bWVudCByZWNlaXZlciBhY2N1cmF0ZSIKICAgIGFzc2VydCAvLyBwYXltZW50IHJlY2VpdmVyIGFjY3VyYXRlCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjM0CiAgICAvLyByZXR1cm4gZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24ocGF5bWVudF9ncm91cF9pbmRleCkuYW1vdW50CiAgICBndHhucyBBbW91bnQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LlVwZ3JhZGVhYmxlLnNldF92ZXJzaW9uKGNvbnRyYWN0X3ZlcnNpb246IGJ5dGVzLCBkZXBsb3ltZW50X3ZlcnNpb246IGJ5dGVzKSAtPiB2b2lkOgpzZXRfdmVyc2lvbjoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6Mjg1LTI4OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X3ZlcnNpb24oCiAgICAvLyAgICAgc2VsZiwgY29udHJhY3RfdmVyc2lvbjogYXJjNC5VSW50NjQsIGRlcGxveW1lbnRfdmVyc2lvbjogYXJjNC5VSW50NjQKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyODkKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYudXBncmFkZXIsICJtdXN0IGJlIHVwZ3JhZGVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjM2CiAgICAvLyBzZWxmLnVwZ3JhZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJ1cGdyYWRlciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6Mjg5CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLnVwZ3JhZGVyLCAibXVzdCBiZSB1cGdyYWRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi51cGdyYWRlciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSB1cGdyYWRlcgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyOTAKICAgIC8vIGFyYzQuZW1pdChWZXJzaW9uVXBkYXRlZChjb250cmFjdF92ZXJzaW9uLCBkZXBsb3ltZW50X3ZlcnNpb24pKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgbWV0aG9kICJWZXJzaW9uVXBkYXRlZCh1aW50NjQsdWludDY0KSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI5MQogICAgLy8gc2VsZi5jb250cmFjdF92ZXJzaW9uID0gY29udHJhY3RfdmVyc2lvbi5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMzMKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IFVJbnQ2NCgpCiAgICBieXRlICJjb250cmFjdF92ZXJzaW9uIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyOTEKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IGNvbnRyYWN0X3ZlcnNpb24ubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyOTIKICAgIC8vIHNlbGYuZGVwbG95bWVudF92ZXJzaW9uID0gZGVwbG95bWVudF92ZXJzaW9uLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIzNAogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBVSW50NjQoKQogICAgYnl0ZSAiZGVwbG95bWVudF92ZXJzaW9uIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyOTIKICAgIC8vIHNlbGYuZGVwbG95bWVudF92ZXJzaW9uID0gZGVwbG95bWVudF92ZXJzaW9uLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LlVwZ3JhZGVhYmxlLmFwcHJvdmVfdXBkYXRlKGFwcHJvdmFsOiBieXRlcykgLT4gdm9pZDoKYXBwcm92ZV91cGRhdGU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMwMy0zMDQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFwcHJvdmVfdXBkYXRlKHNlbGYsIGFwcHJvdmFsOiBhcmM0LkJvb2wpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzA1CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojc2CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzA1CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBvd25lcgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMDYKICAgIC8vIGFyYzQuZW1pdChVcGRhdGVBcHByb3ZlZChhcmM0LkFkZHJlc3Moc2VsZi5vd25lciksIGFwcHJvdmFsKSkKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojc2CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzA2CiAgICAvLyBhcmM0LmVtaXQoVXBkYXRlQXBwcm92ZWQoYXJjNC5BZGRyZXNzKHNlbGYub3duZXIpLCBhcHByb3ZhbCkpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgbWV0aG9kICJVcGRhdGVBcHByb3ZlZChhZGRyZXNzLGJvb2wpIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzA3CiAgICAvLyBzZWxmLnVwZGF0YWJsZSA9IGFwcHJvdmFsLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgMAogICAgZ2V0Yml0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIzNQogICAgLy8gc2VsZi51cGRhdGFibGUgPSBib29sKDEpCiAgICBieXRlICJ1cGRhdGFibGUiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMwNwogICAgLy8gc2VsZi51cGRhdGFibGUgPSBhcHByb3ZhbC5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5VcGdyYWRlYWJsZS5ncmFudF91cGdyYWRlcih1cGdyYWRlcjogYnl0ZXMpIC0+IHZvaWQ6CmdyYW50X3VwZ3JhZGVyOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMDktMzEwCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBncmFudF91cGdyYWRlcihzZWxmLCB1cGdyYWRlcjogYXJjNC5BZGRyZXNzKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMxMQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIm11c3QgYmUgY3JlYXRvciIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGNyZWF0b3IKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzEyCiAgICAvLyBhcmM0LmVtaXQoVXBncmFkZXJHcmFudGVkKGFyYzQuQWRkcmVzcyhzZWxmLnVwZ3JhZGVyKSwgdXBncmFkZXIpKQogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjM2CiAgICAvLyBzZWxmLnVwZ3JhZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJ1cGdyYWRlciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzEyCiAgICAvLyBhcmM0LmVtaXQoVXBncmFkZXJHcmFudGVkKGFyYzQuQWRkcmVzcyhzZWxmLnVwZ3JhZGVyKSwgdXBncmFkZXIpKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVwZ3JhZGVyIGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIG1ldGhvZCAiVXBncmFkZXJHcmFudGVkKGFkZHJlc3MsYWRkcmVzcykiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMzYKICAgIC8vIHNlbGYudXBncmFkZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgInVwZ3JhZGVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMTMKICAgIC8vIHNlbGYudXBncmFkZXIgPSB1cGdyYWRlci5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LlVwZ3JhZGVhYmxlLm9uX3VwZGF0ZSgpIC0+IHZvaWQ6Cm9uX3VwZGF0ZToKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6Mjk0LTI5NQogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiBvbl91cGRhdGUoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyOTYtMjk5CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgV0FSTklORzogVGhpcyBhcHAgY2FuIGJlIHVwZGF0ZWQgYnkgdGhlIGNyZWF0b3IKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi51cGdyYWRlciwgIm11c3QgYmUgdXBncmFkZXIiCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMzYKICAgIC8vIHNlbGYudXBncmFkZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgInVwZ3JhZGVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyOTYtMjk5CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgV0FSTklORzogVGhpcyBhcHAgY2FuIGJlIHVwZGF0ZWQgYnkgdGhlIGNyZWF0b3IKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi51cGdyYWRlciwgIm11c3QgYmUgdXBncmFkZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXBncmFkZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgdXBncmFkZXIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzAwCiAgICAvLyBhc3NlcnQgc2VsZi51cGRhdGFibGUgPT0gVUludDY0KDEpLCAibm90IGFwcHJvdmVkIgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjM1CiAgICAvLyBzZWxmLnVwZGF0YWJsZSA9IGJvb2woMSkKICAgIGJ5dGUgInVwZGF0YWJsZSIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzAwCiAgICAvLyBhc3NlcnQgc2VsZi51cGRhdGFibGUgPT0gVUludDY0KDEpLCAibm90IGFwcHJvdmVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVwZGF0YWJsZSBleGlzdHMKICAgIGludCAxCiAgICA9PQogICAgYXNzZXJ0IC8vIG5vdCBhcHByb3ZlZAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuT1NBUkMyMDBUb2tlbkZhY3RvcnkuX19pbml0X18oKSAtPiB2b2lkOgpfX2luaXRfXzoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjU1CiAgICAvLyBkZWYgX19pbml0X18oc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTYKICAgIC8vIHN1cGVyKCkuX19pbml0X18oKQogICAgY2FsbHN1YiBCYXNlRmFjdG9yeS5fX2luaXRfXwogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuQmFzZUZhY3RvcnkuX19pbml0X18oKSAtPiB2b2lkOgpCYXNlRmFjdG9yeS5fX2luaXRfXzoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjIwCiAgICAvLyBkZWYgX19pbml0X18oc2VsZikgLT4gTm9uZTogICMgcHJhZ21hOiBubyBjb3ZlcgogICAgcHJvdG8gMCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIzMwogICAgLy8gc2VsZi5jb250cmFjdF92ZXJzaW9uID0gVUludDY0KCkKICAgIGJ5dGUgImNvbnRyYWN0X3ZlcnNpb24iCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYyNC02MjUKICAgIC8vICMgdXBncmFkZWFibGUgc3RhdGUKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IFVJbnQ2NCgpCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjM0CiAgICAvLyBzZWxmLmRlcGxveW1lbnRfdmVyc2lvbiA9IFVJbnQ2NCgpCiAgICBieXRlICJkZXBsb3ltZW50X3ZlcnNpb24iCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYyNgogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBVSW50NjQoKQogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIzNQogICAgLy8gc2VsZi51cGRhdGFibGUgPSBib29sKDEpCiAgICBieXRlICJ1cGRhdGFibGUiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYyNwogICAgLy8gc2VsZi51cGRhdGFibGUgPSBib29sKDEpCiAgICBpbnQgMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjM2CiAgICAvLyBzZWxmLnVwZ3JhZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJ1cGdyYWRlciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjI4CiAgICAvLyBzZWxmLnVwZ3JhZGVyID0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5PU0FSQzIwMFRva2VuRmFjdG9yeS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTQKICAgIC8vIGNsYXNzIE9TQVJDMjAwVG9rZW5GYWN0b3J5KEJhc2VGYWN0b3J5KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "contract_version": {
                    "type": "uint64",
                    "key": "contract_version"
                },
                "deployment_version": {
                    "type": "uint64",
                    "key": "deployment_version"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "updatable": {
                    "type": "uint64",
                    "key": "updatable"
                },
                "upgrader": {
                    "type": "bytes",
                    "key": "upgrader"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "OSARC200TokenFactory",
        "methods": [
            {
                "name": "create",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Create airdrop.\nArguments: - owner, who is the beneficiary - funder, who funded the contract - deadline, funding deadline - initial, initial funded value not including lockup bonus\nReturns: - app id"
            },
            {
                "name": "set_version",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contract_version"
                    },
                    {
                        "type": "uint64",
                        "name": "deployment_version"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve_update",
                "args": [
                    {
                        "type": "bool",
                        "name": "approval"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "grant_upgrader",
                "args": [
                    {
                        "type": "address",
                        "name": "upgrader"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
};
/**
 * Exposes methods for constructing all available smart contract calls
 */
export class Osarc200TokenFactoryCallFactory {
    /**
     * Gets available create call factories
     */
    static get create() {
        return {
            /**
             * Constructs a create call for the OSARC200TokenFactory smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available update call factories
     */
    static get update() {
        return {
            /**
             * Constructs an update call for the OSARC200TokenFactory smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Constructs a no op call for the create()uint64 ABI method
     *
     * Create airdrop.
  Arguments: - owner, who is the beneficiary - funder, who funded the contract - deadline, funding deadline - initial, initial funded value not including lockup bonus
  Returns: - app id
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static create(args, params) {
        return {
            method: 'create()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_version(uint64,uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setVersion(args, params) {
        return {
            method: 'set_version(uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the approve_update(bool)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static approveUpdate(args, params) {
        return {
            method: 'approve_update(bool)void',
            methodArgs: Array.isArray(args) ? args : [args.approval],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the grant_upgrader(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static grantUpgrader(args, params) {
        return {
            method: 'grant_upgrader(address)void',
            methodArgs: Array.isArray(args) ? args : [args.upgrader],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the transfer(address)void ABI method
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static transfer(args, params) {
        return {
            method: 'transfer(address)void',
            methodArgs: Array.isArray(args) ? args : [args.newOwner],
            ...params,
        };
    }
}
/**
 * A client to make calls to the OSARC200TokenFactory smart contract
 */
export class Osarc200TokenFactoryClient {
    algod;
    /**
     * The underlying `ApplicationClient` for when you want to have more flexibility
     */
    appClient;
    sender;
    /**
     * Creates a new instance of `Osarc200TokenFactoryClient`
     *
     * @param appDetails appDetails The details to identify the app to deploy
     * @param algod An algod client instance
     */
    constructor(appDetails, algod) {
        this.algod = algod;
        this.sender = appDetails.sender;
        this.appClient = algokit.getAppClient({
            ...appDetails,
            app: APP_SPEC
        }, algod);
    }
    /**
     * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
     *
     * @param result The AppCallTransactionResult to be mapped
     * @param returnValueFormatter An optional delegate to format the return value if required
     * @returns The smart contract response with an updated return value
     */
    mapReturnValue(result, returnValueFormatter) {
        if (result.return?.decodeError) {
            throw result.return.decodeError;
        }
        const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
            ? returnValueFormatter(result.return.returnValue)
            : result.return?.returnValue;
        return { ...result, return: returnValue };
    }
    /**
     * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
     *
     * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
     * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
     * @returns The result of the smart contract call
     */
    async call(typedCallParams, returnValueFormatter) {
        return this.mapReturnValue(await this.appClient.call(typedCallParams), returnValueFormatter);
    }
    /**
     * Idempotently deploys the OSARC200TokenFactory smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params = {}) {
        const createArgs = params.createCall?.(Osarc200TokenFactoryCallFactory.create);
        const updateArgs = params.updateCall?.(Osarc200TokenFactoryCallFactory.update);
        return this.appClient.deploy({
            ...params,
            updateArgs,
            createArgs,
            createOnCompleteAction: createArgs?.onCompleteAction,
        });
    }
    /**
     * Gets available create methods
     */
    get create() {
        const $this = this;
        return {
            /**
             * Creates a new instance of the OSARC200TokenFactory smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The create result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.create(args));
            },
        };
    }
    /**
     * Gets available update methods
     */
    get update() {
        const $this = this;
        return {
            /**
             * Updates an existing instance of the OSARC200TokenFactory smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The update result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.update(args));
            },
        };
    }
    /**
     * Makes a clear_state call to an existing instance of the OSARC200TokenFactory smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The clear_state result
     */
    clearState(args = {}) {
        return this.appClient.clearState(args);
    }
    /**
     * Calls the create()uint64 ABI method.
     *
     * Create airdrop.
  Arguments: - owner, who is the beneficiary - funder, who funded the contract - deadline, funding deadline - initial, initial funded value not including lockup bonus
  Returns: - app id
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    create(args, params = {}) {
        return this.call(Osarc200TokenFactoryCallFactory.create(args, params));
    }
    /**
     * Calls the set_version(uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setVersion(args, params = {}) {
        return this.call(Osarc200TokenFactoryCallFactory.setVersion(args, params));
    }
    /**
     * Calls the approve_update(bool)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    approveUpdate(args, params = {}) {
        return this.call(Osarc200TokenFactoryCallFactory.approveUpdate(args, params));
    }
    /**
     * Calls the grant_upgrader(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    grantUpgrader(args, params = {}) {
        return this.call(Osarc200TokenFactoryCallFactory.grantUpgrader(args, params));
    }
    /**
     * Calls the transfer(address)void ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    transfer(args, params = {}) {
        return this.call(Osarc200TokenFactoryCallFactory.transfer(args, params));
    }
    /**
     * Extracts a binary state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns A BinaryState instance containing the state value, or undefined if the key was not found
     */
    static getBinaryState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if (!('valueRaw' in value))
            throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`);
        return {
            asString() {
                return value.value;
            },
            asByteArray() {
                return value.valueRaw;
            }
        };
    }
    /**
     * Extracts a integer state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns An IntegerState instance containing the state value, or undefined if the key was not found
     */
    static getIntegerState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if ('valueRaw' in value)
            throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`);
        return {
            asBigInt() {
                return typeof value.value === 'bigint' ? value.value : BigInt(value.value);
            },
            asNumber() {
                return typeof value.value === 'bigint' ? Number(value.value) : value.value;
            },
        };
    }
    /**
     * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
     */
    async getGlobalState() {
        const state = await this.appClient.getGlobalState();
        return {
            get contractVersion() {
                return Osarc200TokenFactoryClient.getIntegerState(state, 'contract_version');
            },
            get deploymentVersion() {
                return Osarc200TokenFactoryClient.getIntegerState(state, 'deployment_version');
            },
            get owner() {
                return Osarc200TokenFactoryClient.getBinaryState(state, 'owner');
            },
            get updatable() {
                return Osarc200TokenFactoryClient.getIntegerState(state, 'updatable');
            },
            get upgrader() {
                return Osarc200TokenFactoryClient.getBinaryState(state, 'upgrader');
            },
        };
    }
    compose() {
        const client = this;
        const atc = new AtomicTransactionComposer();
        let promiseChain = Promise.resolve();
        const resultMappers = [];
        return {
            create(args, params) {
                promiseChain = promiseChain.then(() => client.create(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setVersion(args, params) {
                promiseChain = promiseChain.then(() => client.setVersion(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            approveUpdate(args, params) {
                promiseChain = promiseChain.then(() => client.approveUpdate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            grantUpgrader(args, params) {
                promiseChain = promiseChain.then(() => client.grantUpgrader(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            transfer(args, params) {
                promiseChain = promiseChain.then(() => client.transfer(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            get update() {
                const $this = this;
                return {
                    bare(args) {
                        promiseChain = promiseChain.then(() => client.update.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            clearState(args) {
                promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            addTransaction(txn, defaultSender) {
                promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)));
                return this;
            },
            async atc() {
                await promiseChain;
                return atc;
            },
            async simulate(options) {
                await promiseChain;
                const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
                return {
                    ...result,
                    returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            },
            async execute(sendParams) {
                await promiseChain;
                const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            }
        };
    }
}
