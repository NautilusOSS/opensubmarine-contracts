/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"OSARC200TokenFactory","structs":{},"methods":[{"name":"create","desc":"Create airdrop.\nArguments: - owner, who is the beneficiary - funder, who funded the contract - deadline, funding deadline - initial, initial funded value not including lockup bonus\nReturns: - app id","args":[],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_version","args":[{"name":"contract_version","type":"uint64"},{"name":"deployment_version","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"approve_update","args":[{"name":"approval","type":"bool"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"grant_upgrader","args":[{"name":"upgrader","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"transfer","desc":"Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.","args":[{"name":"new_owner","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":3,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"contract_version":{"key":"Y29udHJhY3RfdmVyc2lvbg==","keyType":"AVMString","valueType":"AVMUint64"},"deployment_version":{"key":"ZGVwbG95bWVudF92ZXJzaW9u","keyType":"AVMString","valueType":"AVMUint64"},"owner":{"key":"b3duZXI=","keyType":"AVMString","valueType":"AVMBytes"},"updatable":{"key":"dXBkYXRhYmxl","keyType":"AVMString","valueType":"AVMUint64"},"upgrader":{"key":"dXBncmFkZXI=","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5PU0FSQzIwMFRva2VuRmFjdG9yeS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTgKICAgIC8vIGNsYXNzIE9TQVJDMjAwVG9rZW5GYWN0b3J5KEJhc2VGYWN0b3J5KToKICAgIGludCAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp"],"call":["UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Osarc200TokenFactory contract
 */
export type Osarc200TokenFactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create()uint64': Record<string, never>
    'set_version(uint64,uint64)void': {
      contractVersion: bigint | number
      deploymentVersion: bigint | number
    }
    'approve_update(bool)void': {
      approval: boolean
    }
    'grant_upgrader(address)void': {
      upgrader: string
    }
    'transfer(address)void': {
      newOwner: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create()uint64': []
    'set_version(uint64,uint64)void': [contractVersion: bigint | number, deploymentVersion: bigint | number]
    'approve_update(bool)void': [approval: boolean]
    'grant_upgrader(address)void': [upgrader: string]
    'transfer(address)void': [newOwner: string]
  }
}

/**
 * The return type for each method
 */
export type Osarc200TokenFactoryReturns = {
  'create()uint64': bigint
  'set_version(uint64,uint64)void': void
  'approve_update(bool)void': void
  'grant_upgrader(address)void': void
  'transfer(address)void': void
}

/**
 * Defines the types of available calls and state of the Osarc200TokenFactory smart contract.
 */
export type Osarc200TokenFactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create()uint64' | 'create', {
      argsObj: Osarc200TokenFactoryArgs['obj']['create()uint64']
      argsTuple: Osarc200TokenFactoryArgs['tuple']['create()uint64']
      returns: Osarc200TokenFactoryReturns['create()uint64']
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: Osarc200TokenFactoryArgs['obj']['set_version(uint64,uint64)void']
      argsTuple: Osarc200TokenFactoryArgs['tuple']['set_version(uint64,uint64)void']
      returns: Osarc200TokenFactoryReturns['set_version(uint64,uint64)void']
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: Osarc200TokenFactoryArgs['obj']['approve_update(bool)void']
      argsTuple: Osarc200TokenFactoryArgs['tuple']['approve_update(bool)void']
      returns: Osarc200TokenFactoryReturns['approve_update(bool)void']
    }>
    & Record<'grant_upgrader(address)void' | 'grant_upgrader', {
      argsObj: Osarc200TokenFactoryArgs['obj']['grant_upgrader(address)void']
      argsTuple: Osarc200TokenFactoryArgs['tuple']['grant_upgrader(address)void']
      returns: Osarc200TokenFactoryReturns['grant_upgrader(address)void']
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: Osarc200TokenFactoryArgs['obj']['transfer(address)void']
      argsTuple: Osarc200TokenFactoryArgs['tuple']['transfer(address)void']
      returns: Osarc200TokenFactoryReturns['transfer(address)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        contractVersion: bigint
        deploymentVersion: bigint
        owner: BinaryState
        updatable: bigint
        upgrader: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Osarc200TokenFactorySignatures = keyof Osarc200TokenFactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Osarc200TokenFactoryNonVoidMethodSignatures = keyof Osarc200TokenFactoryTypes['methods'] extends infer T ? T extends keyof Osarc200TokenFactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Osarc200TokenFactory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Osarc200TokenFactorySignatures> = Osarc200TokenFactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Osarc200TokenFactory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Osarc200TokenFactorySignatures> = Osarc200TokenFactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Osarc200TokenFactoryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Osarc200TokenFactoryCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type Osarc200TokenFactoryUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type Osarc200TokenFactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Osarc200TokenFactoryCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: Osarc200TokenFactoryUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Osarc200TokenFactory smart contract
 */
export abstract class Osarc200TokenFactoryParamsFactory {
  /**
   * Constructs a no op call for the create()uint64 ABI method
   *
  * Create airdrop.
  Arguments: - owner, who is the beneficiary - funder, who funded the contract - deadline, funding deadline - initial, initial funded value not including lockup bonus
  Returns: - app id

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static create(params: CallParams<Osarc200TokenFactoryArgs['obj']['create()uint64'] | Osarc200TokenFactoryArgs['tuple']['create()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setVersion(params: CallParams<Osarc200TokenFactoryArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenFactoryArgs['tuple']['set_version(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_version(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contractVersion, params.args.deploymentVersion],
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveUpdate(params: CallParams<Osarc200TokenFactoryArgs['obj']['approve_update(bool)void'] | Osarc200TokenFactoryArgs['tuple']['approve_update(bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approve_update(bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.approval],
    }
  }
  /**
   * Constructs a no op call for the grant_upgrader(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static grantUpgrader(params: CallParams<Osarc200TokenFactoryArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenFactoryArgs['tuple']['grant_upgrader(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'grant_upgrader(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.upgrader],
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transfer(params: CallParams<Osarc200TokenFactoryArgs['obj']['transfer(address)void'] | Osarc200TokenFactoryArgs['tuple']['transfer(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transfer(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OSARC200TokenFactory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Osarc200TokenFactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Osarc200TokenFactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Osarc200TokenFactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Osarc200TokenFactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OSARC200TokenFactory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Osarc200TokenFactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new Osarc200TokenFactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OSARC200TokenFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the OSARC200TokenFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OSARC200TokenFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OSARC200TokenFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new Osarc200TokenFactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OSARC200TokenFactory smart contract
 */
export class Osarc200TokenFactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Osarc200TokenFactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Osarc200TokenFactory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Osarc200TokenFactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Osarc200TokenFactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Osarc200TokenFactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Osarc200TokenFactoryClient> {
    return new Osarc200TokenFactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Osarc200TokenFactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Osarc200TokenFactoryClient> {
    return new Osarc200TokenFactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the OSARC200TokenFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the OSARC200TokenFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `create()uint64` ABI method.
     *
    * Create airdrop.
    Arguments: - owner, who is the beneficiary - funder, who funded the contract - deadline, funding deadline - initial, initial funded value not including lockup bonus
    Returns: - app id

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    create: (params: CallParams<Osarc200TokenFactoryArgs['obj']['create()uint64'] | Osarc200TokenFactoryArgs['tuple']['create()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Osarc200TokenFactoryParamsFactory.create(params))
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `set_version(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setVersion: (params: CallParams<Osarc200TokenFactoryArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenFactoryArgs['tuple']['set_version(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenFactoryParamsFactory.setVersion(params))
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `approve_update(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveUpdate: (params: CallParams<Osarc200TokenFactoryArgs['obj']['approve_update(bool)void'] | Osarc200TokenFactoryArgs['tuple']['approve_update(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenFactoryParamsFactory.approveUpdate(params))
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `grant_upgrader(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    grantUpgrader: (params: CallParams<Osarc200TokenFactoryArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenFactoryArgs['tuple']['grant_upgrader(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenFactoryParamsFactory.grantUpgrader(params))
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `transfer(address)void` ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transfer: (params: CallParams<Osarc200TokenFactoryArgs['obj']['transfer(address)void'] | Osarc200TokenFactoryArgs['tuple']['transfer(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Osarc200TokenFactoryParamsFactory.transfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the OSARC200TokenFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the OSARC200TokenFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `create()uint64` ABI method.
     *
    * Create airdrop.
    Arguments: - owner, who is the beneficiary - funder, who funded the contract - deadline, funding deadline - initial, initial funded value not including lockup bonus
    Returns: - app id

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    create: (params: CallParams<Osarc200TokenFactoryArgs['obj']['create()uint64'] | Osarc200TokenFactoryArgs['tuple']['create()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Osarc200TokenFactoryParamsFactory.create(params))
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `set_version(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setVersion: (params: CallParams<Osarc200TokenFactoryArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenFactoryArgs['tuple']['set_version(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenFactoryParamsFactory.setVersion(params))
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `approve_update(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveUpdate: (params: CallParams<Osarc200TokenFactoryArgs['obj']['approve_update(bool)void'] | Osarc200TokenFactoryArgs['tuple']['approve_update(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenFactoryParamsFactory.approveUpdate(params))
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `grant_upgrader(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    grantUpgrader: (params: CallParams<Osarc200TokenFactoryArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenFactoryArgs['tuple']['grant_upgrader(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenFactoryParamsFactory.grantUpgrader(params))
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `transfer(address)void` ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transfer: (params: CallParams<Osarc200TokenFactoryArgs['obj']['transfer(address)void'] | Osarc200TokenFactoryArgs['tuple']['transfer(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Osarc200TokenFactoryParamsFactory.transfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the OSARC200TokenFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the OSARC200TokenFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `create()uint64` ABI method.
     *
    * Create airdrop.
    Arguments: - owner, who is the beneficiary - funder, who funded the contract - deadline, funding deadline - initial, initial funded value not including lockup bonus
    Returns: - app id

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    create: async (params: CallParams<Osarc200TokenFactoryArgs['obj']['create()uint64'] | Osarc200TokenFactoryArgs['tuple']['create()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Osarc200TokenFactoryParamsFactory.create(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenFactoryReturns['create()uint64'])}
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `set_version(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setVersion: async (params: CallParams<Osarc200TokenFactoryArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenFactoryArgs['tuple']['set_version(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenFactoryParamsFactory.setVersion(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenFactoryReturns['set_version(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `approve_update(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveUpdate: async (params: CallParams<Osarc200TokenFactoryArgs['obj']['approve_update(bool)void'] | Osarc200TokenFactoryArgs['tuple']['approve_update(bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenFactoryParamsFactory.approveUpdate(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenFactoryReturns['approve_update(bool)void'])}
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `grant_upgrader(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    grantUpgrader: async (params: CallParams<Osarc200TokenFactoryArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenFactoryArgs['tuple']['grant_upgrader(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenFactoryParamsFactory.grantUpgrader(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenFactoryReturns['grant_upgrader(address)void'])}
    },

    /**
     * Makes a call to the OSARC200TokenFactory smart contract using the `transfer(address)void` ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transfer: async (params: CallParams<Osarc200TokenFactoryArgs['obj']['transfer(address)void'] | Osarc200TokenFactoryArgs['tuple']['transfer(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Osarc200TokenFactoryParamsFactory.transfer(params))
      return {...result, return: result.return as unknown as (undefined | Osarc200TokenFactoryReturns['transfer(address)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Osarc200TokenFactoryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current OSARC200TokenFactory app
   */
  state = {
    /**
     * Methods to access global state for the current OSARC200TokenFactory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          contractVersion: result.contract_version,
          deploymentVersion: result.deployment_version,
          owner: new BinaryStateValue(result.owner),
          updatable: result.updatable,
          upgrader: new BinaryStateValue(result.upgrader),
        }
      },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contractVersion")) as bigint | undefined },
      /**
       * Get the current value of the deployment_version key in global state
       */
      deploymentVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("deploymentVersion")) as bigint | undefined },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("owner")) as Uint8Array | undefined) },
      /**
       * Get the current value of the updatable key in global state
       */
      updatable: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("updatable")) as bigint | undefined },
      /**
       * Get the current value of the upgrader key in global state
       */
      upgrader: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("upgrader")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): Osarc200TokenFactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create()uint64 method call against the OSARC200TokenFactory contract
       */
      create(params: CallParams<Osarc200TokenFactoryArgs['obj']['create()uint64'] | Osarc200TokenFactoryArgs['tuple']['create()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.create(params)))
        resultMappers.push((v) => client.decodeReturnValue('create()uint64', v))
        return this
      },
      /**
       * Add a set_version(uint64,uint64)void method call against the OSARC200TokenFactory contract
       */
      setVersion(params: CallParams<Osarc200TokenFactoryArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenFactoryArgs['tuple']['set_version(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setVersion(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a approve_update(bool)void method call against the OSARC200TokenFactory contract
       */
      approveUpdate(params: CallParams<Osarc200TokenFactoryArgs['obj']['approve_update(bool)void'] | Osarc200TokenFactoryArgs['tuple']['approve_update(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveUpdate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a grant_upgrader(address)void method call against the OSARC200TokenFactory contract
       */
      grantUpgrader(params: CallParams<Osarc200TokenFactoryArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenFactoryArgs['tuple']['grant_upgrader(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.grantUpgrader(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a transfer(address)void method call against the OSARC200TokenFactory contract
       */
      transfer(params: CallParams<Osarc200TokenFactoryArgs['obj']['transfer(address)void'] | Osarc200TokenFactoryArgs['tuple']['transfer(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transfer(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the OSARC200TokenFactory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Osarc200TokenFactoryComposer
  }
}
export type Osarc200TokenFactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create()uint64 ABI method.
   *
  * Create airdrop.
  Arguments: - owner, who is the beneficiary - funder, who funded the contract - deadline, funding deadline - initial, initial funded value not including lockup bonus
  Returns: - app id

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(params?: CallParams<Osarc200TokenFactoryArgs['obj']['create()uint64'] | Osarc200TokenFactoryArgs['tuple']['create()uint64']>): Osarc200TokenFactoryComposer<[...TReturns, Osarc200TokenFactoryReturns['create()uint64'] | undefined]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(params?: CallParams<Osarc200TokenFactoryArgs['obj']['set_version(uint64,uint64)void'] | Osarc200TokenFactoryArgs['tuple']['set_version(uint64,uint64)void']>): Osarc200TokenFactoryComposer<[...TReturns, Osarc200TokenFactoryReturns['set_version(uint64,uint64)void'] | undefined]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(params?: CallParams<Osarc200TokenFactoryArgs['obj']['approve_update(bool)void'] | Osarc200TokenFactoryArgs['tuple']['approve_update(bool)void']>): Osarc200TokenFactoryComposer<[...TReturns, Osarc200TokenFactoryReturns['approve_update(bool)void'] | undefined]>

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantUpgrader(params?: CallParams<Osarc200TokenFactoryArgs['obj']['grant_upgrader(address)void'] | Osarc200TokenFactoryArgs['tuple']['grant_upgrader(address)void']>): Osarc200TokenFactoryComposer<[...TReturns, Osarc200TokenFactoryReturns['grant_upgrader(address)void'] | undefined]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(params?: CallParams<Osarc200TokenFactoryArgs['obj']['transfer(address)void'] | Osarc200TokenFactoryArgs['tuple']['transfer(address)void']>): Osarc200TokenFactoryComposer<[...TReturns, Osarc200TokenFactoryReturns['transfer(address)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the OSARC200TokenFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Osarc200TokenFactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Osarc200TokenFactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Osarc200TokenFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Osarc200TokenFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Osarc200TokenFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Osarc200TokenFactoryComposerResults<TReturns>>
}
export type Osarc200TokenFactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

