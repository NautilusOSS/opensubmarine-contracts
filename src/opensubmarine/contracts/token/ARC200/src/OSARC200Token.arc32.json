{
    "hints": {
        "mint(address,byte[32],byte[8],uint8,uint256)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "kill()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "arc200_name()byte[32]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_symbol()byte[8]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_decimals()uint8": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_totalSupply()uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_balanceOf(address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_allowance(address,address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_transferFrom(address,address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_transfer(address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_approve(address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_version(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_update(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "grant_upgrader(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_delegate(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpvcGVuc3VibWFyaW5lLmNvbnRyYWN0cy50b2tlbi5BUkMyMDAuc3JjLmNvbnRyYWN0Lk9TQVJDMjAwVG9rZW4uY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNyYy9jb250cmFjdC5weToyMjAKICAgIC8vIGNsYXNzIE9TQVJDMjAwVG9rZW4oQVJDMjAwVG9rZW4sIFVwZ3JhZGVhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 7,
            "num_uints": 6
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "contract_version": {
                    "type": "uint64",
                    "key": "contract_version"
                },
                "decimals": {
                    "type": "uint64",
                    "key": "decimals"
                },
                "delegate": {
                    "type": "bytes",
                    "key": "delegate"
                },
                "deployer": {
                    "type": "bytes",
                    "key": "deployer"
                },
                "deployment_version": {
                    "type": "uint64",
                    "key": "deployment_version"
                },
                "name": {
                    "type": "bytes",
                    "key": "name"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "parent_id": {
                    "type": "uint64",
                    "key": "parent_id"
                },
                "stakeable": {
                    "type": "uint64",
                    "key": "stakeable"
                },
                "symbol": {
                    "type": "bytes",
                    "key": "symbol"
                },
                "totalSupply": {
                    "type": "bytes",
                    "key": "totalSupply"
                },
                "updatable": {
                    "type": "uint64",
                    "key": "updatable"
                },
                "upgrader": {
                    "type": "bytes",
                    "key": "upgrader"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "OSARC200Token",
        "methods": [
            {
                "name": "mint",
                "args": [
                    {
                        "type": "address",
                        "name": "receiver"
                    },
                    {
                        "type": "byte[32]",
                        "name": "name"
                    },
                    {
                        "type": "byte[8]",
                        "name": "symbol"
                    },
                    {
                        "type": "uint8",
                        "name": "decimals"
                    },
                    {
                        "type": "uint256",
                        "name": "totalSupply"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Mint tokens"
            },
            {
                "name": "kill",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Kill contract"
            },
            {
                "name": "arc200_name",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[32]"
                }
            },
            {
                "name": "arc200_symbol",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[8]"
                }
            },
            {
                "name": "arc200_decimals",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "arc200_totalSupply",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_balanceOf",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_allowance",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "address",
                        "name": "spender"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_transferFrom",
                "args": [
                    {
                        "type": "address",
                        "name": "sender"
                    },
                    {
                        "type": "address",
                        "name": "recipient"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc200_transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "recipient"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc200_approve",
                "args": [
                    {
                        "type": "address",
                        "name": "spender"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "set_version",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contract_version"
                    },
                    {
                        "type": "uint64",
                        "name": "deployment_version"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve_update",
                "args": [
                    {
                        "type": "bool",
                        "name": "approval"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "grant_upgrader",
                "args": [
                    {
                        "type": "address",
                        "name": "upgrader"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_delegate",
                "args": [
                    {
                        "type": "address",
                        "name": "delegate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "participate",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "vote_k"
                    },
                    {
                        "type": "byte[32]",
                        "name": "sel_k"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_fst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_lst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_kd"
                    },
                    {
                        "type": "byte[64]",
                        "name": "sp_key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
}