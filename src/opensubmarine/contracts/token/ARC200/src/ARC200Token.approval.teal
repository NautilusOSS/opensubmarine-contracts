#pragma version 10

opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // src/contract.py:123
    // class ARC200Token(ARC200TokenInterface):
    txn NumAppArgs
    bz main_bare_routing@15
    method "arc200_name()byte[32]"
    method "arc200_symbol()byte[8]"
    method "arc200_decimals()uint8"
    method "arc200_totalSupply()uint256"
    method "arc200_balanceOf(address)uint256"
    method "arc200_allowance(address,address)uint256"
    method "arc200_transferFrom(address,address,uint256)bool"
    method "arc200_transfer(address,uint256)bool"
    method "arc200_approve(address,uint256)bool"
    txna ApplicationArgs 0
    match main_arc200_name_route@4 main_arc200_symbol_route@5 main_arc200_decimals_route@6 main_arc200_totalSupply_route@7 main_arc200_balanceOf_route@8 main_arc200_allowance_route@9 main_arc200_transferFrom_route@10 main_arc200_transfer_route@11 main_arc200_approve_route@12
    err // reject transaction

main_arc200_name_route@4:
    // src/contract.py:127
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc200_name
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_symbol_route@5:
    // src/contract.py:131
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc200_symbol
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_decimals_route@6:
    // src/contract.py:135
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc200_decimals
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_totalSupply_route@7:
    // src/contract.py:139
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc200_totalSupply
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_balanceOf_route@8:
    // src/contract.py:143
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:123
    // class ARC200Token(ARC200TokenInterface):
    txna ApplicationArgs 1
    // src/contract.py:143
    // @arc4.abimethod(readonly=True)
    callsub arc200_balanceOf
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_allowance_route@9:
    // src/contract.py:151
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:123
    // class ARC200Token(ARC200TokenInterface):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/contract.py:151
    // @arc4.abimethod(readonly=True)
    callsub arc200_allowance
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_transferFrom_route@10:
    // src/contract.py:164
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:123
    // class ARC200Token(ARC200TokenInterface):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // src/contract.py:164
    // @arc4.abimethod
    callsub arc200_transferFrom
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_transfer_route@11:
    // src/contract.py:182
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:123
    // class ARC200Token(ARC200TokenInterface):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/contract.py:182
    // @arc4.abimethod
    callsub arc200_transfer
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_approve_route@12:
    // src/contract.py:205
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:123
    // class ARC200Token(ARC200TokenInterface):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/contract.py:205
    // @arc4.abimethod
    callsub arc200_approve
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@15:
    // src/contract.py:123
    // class ARC200Token(ARC200TokenInterface):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_name() -> bytes:
arc200_name:
    // src/contract.py:127-128
    // @arc4.abimethod(readonly=True)
    // def arc200_name(self) -> Bytes32:
    proto 0 1
    // src/contract.py:129
    // return Bytes32.from_bytes(self.name.bytes)
    int 0
    // src/contract.py:54-55
    // # arc200 state
    // self.name = String()
    byte "name"
    // src/contract.py:129
    // return Bytes32.from_bytes(self.name.bytes)
    app_global_get_ex
    assert // check self.name exists
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_symbol() -> bytes:
arc200_symbol:
    // src/contract.py:131-132
    // @arc4.abimethod(readonly=True)
    // def arc200_symbol(self) -> Bytes8:
    proto 0 1
    // src/contract.py:133
    // return Bytes8.from_bytes(self.symbol.bytes)
    int 0
    // src/contract.py:56
    // self.symbol = String()
    byte "symbol"
    // src/contract.py:133
    // return Bytes8.from_bytes(self.symbol.bytes)
    app_global_get_ex
    assert // check self.symbol exists
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_decimals() -> bytes:
arc200_decimals:
    // src/contract.py:135-136
    // @arc4.abimethod(readonly=True)
    // def arc200_decimals(self) -> arc4.UInt8:
    proto 0 1
    // src/contract.py:137
    // return arc4.UInt8(self.decimals)
    int 0
    // src/contract.py:57
    // self.decimals = UInt64()
    byte "decimals"
    // src/contract.py:137
    // return arc4.UInt8(self.decimals)
    app_global_get_ex
    assert // check self.decimals exists
    itob
    extract 7 1
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_totalSupply() -> bytes:
arc200_totalSupply:
    // src/contract.py:139-140
    // @arc4.abimethod(readonly=True)
    // def arc200_totalSupply(self) -> arc4.UInt256:
    proto 0 1
    // src/contract.py:141
    // return arc4.UInt256(self.totalSupply)
    int 0
    // src/contract.py:58
    // self.totalSupply = BigUInt()
    byte "totalSupply"
    // src/contract.py:141
    // return arc4.UInt256(self.totalSupply)
    app_global_get_ex
    assert // check self.totalSupply exists
    dup
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    b|
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_balanceOf(account: bytes) -> bytes:
arc200_balanceOf:
    // src/contract.py:143-144
    // @arc4.abimethod(readonly=True)
    // def arc200_balanceOf(self, account: arc4.Address) -> arc4.UInt256:
    proto 1 1
    // src/contract.py:145
    // return arc4.UInt256(self._balanceOf(account.native))
    frame_dig -1
    callsub _balanceOf
    dup
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    b|
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._balanceOf(account: bytes) -> bytes:
_balanceOf:
    // src/contract.py:147-148
    // @subroutine
    // def _balanceOf(self, account: Account) -> BigUInt:
    proto 1 1
    // src/contract.py:59
    // self.balances = BoxMap(Account, BigUInt)
    byte "balances"
    // src/contract.py:149
    // return self.balances.get(key=account, default=BigUInt(0))
    frame_dig -1
    concat
    box_get
    byte 0x
    cover 2
    select
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_allowance(owner: bytes, spender: bytes) -> bytes:
arc200_allowance:
    // src/contract.py:151-154
    // @arc4.abimethod(readonly=True)
    // def arc200_allowance(
    //     self, owner: arc4.Address, spender: arc4.Address
    // ) -> arc4.UInt256:
    proto 2 1
    // src/contract.py:155
    // return arc4.UInt256(self._allowance(owner.native, spender.native))
    frame_dig -2
    frame_dig -1
    callsub _allowance
    dup
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    b|
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._allowance(owner: bytes, spender: bytes) -> bytes:
_allowance:
    // src/contract.py:157-158
    // @subroutine
    // def _allowance(self, owner: Account, spender: Account) -> BigUInt:
    proto 2 1
    // src/contract.py:160
    // key=op.sha256(owner.bytes + spender.bytes),
    frame_dig -2
    frame_dig -1
    concat
    sha256
    // src/contract.py:60
    // self.approvals = BoxMap(Bytes, BigUInt)
    byte "approvals"
    // src/contract.py:159-162
    // return self.approvals.get(
    //     key=op.sha256(owner.bytes + spender.bytes),
    //     default=BigUInt(0),
    // )
    swap
    concat
    box_get
    // src/contract.py:161
    // default=BigUInt(0),
    byte 0x
    // src/contract.py:159-162
    // return self.approvals.get(
    //     key=op.sha256(owner.bytes + spender.bytes),
    //     default=BigUInt(0),
    // )
    cover 2
    select
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_transferFrom(sender: bytes, recipient: bytes, amount: bytes) -> bytes:
arc200_transferFrom:
    // src/contract.py:164-167
    // @arc4.abimethod
    // def arc200_transferFrom(
    //     self, sender: arc4.Address, recipient: arc4.Address, amount: arc4.UInt256
    // ) -> arc4.Bool:
    proto 3 1
    // src/contract.py:168
    // self._transferFrom(sender.native, recipient.native, amount.native)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub _transferFrom
    // src/contract.py:169
    // return arc4.Bool(True)
    byte 0x80
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._transferFrom(sender: bytes, recipient: bytes, amount: bytes) -> void:
_transferFrom:
    // src/contract.py:171-174
    // @subroutine
    // def _transferFrom(
    //     self, sender: Account, recipient: Account, amount: BigUInt
    // ) -> None:
    proto 3 0
    // src/contract.py:175
    // spender = Txn.sender
    txn Sender
    // src/contract.py:176
    // spender_allowance = self._allowance(sender, spender)
    frame_dig -3
    dig 1
    callsub _allowance
    // src/contract.py:177
    // assert spender_allowance >= amount, "insufficient approval"
    dup
    frame_dig -1
    b>=
    assert // insufficient approval
    // src/contract.py:178
    // new_spender_allowance = spender_allowance - amount
    frame_dig -1
    b-
    // src/contract.py:179
    // self._approve(sender, spender, new_spender_allowance)
    frame_dig -3
    cover 2
    callsub _approve
    // src/contract.py:180
    // self._transfer(sender, recipient, amount)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub _transfer
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._approve(owner: bytes, spender: bytes, amount: bytes) -> void:
_approve:
    // src/contract.py:210-211
    // @subroutine
    // def _approve(self, owner: Account, spender: Account, amount: BigUInt) -> None:
    proto 3 0
    // src/contract.py:212
    // self.approvals[op.sha256(owner.bytes + spender.bytes)] = amount
    frame_dig -3
    frame_dig -2
    concat
    dup
    sha256
    // src/contract.py:60
    // self.approvals = BoxMap(Bytes, BigUInt)
    byte "approvals"
    // src/contract.py:212
    // self.approvals[op.sha256(owner.bytes + spender.bytes)] = amount
    swap
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    // src/contract.py:215
    // arc4.Address(owner), arc4.Address(spender), arc4.UInt256(amount)
    frame_dig -1
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    frame_dig -1
    b|
    // src/contract.py:214-216
    // arc200_Approval(
    //     arc4.Address(owner), arc4.Address(spender), arc4.UInt256(amount)
    // )
    concat
    // src/contract.py:213-217
    // arc4.emit(
    //     arc200_Approval(
    //         arc4.Address(owner), arc4.Address(spender), arc4.UInt256(amount)
    //     )
    // )
    method "arc200_Approval(address,address,uint256)"
    swap
    concat
    log
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._transfer(sender: bytes, recipient: bytes, amount: bytes) -> void:
_transfer:
    // src/contract.py:189-190
    // @subroutine
    // def _transfer(self, sender: Account, recipient: Account, amount: BigUInt) -> None:
    proto 3 0
    // src/contract.py:191
    // sender_balance = self._balanceOf(sender)
    frame_dig -3
    callsub _balanceOf
    dup
    // src/contract.py:192
    // recipient_balance = self._balanceOf(recipient)
    frame_dig -2
    callsub _balanceOf
    cover 2
    // src/contract.py:193
    // assert sender_balance >= amount, "insufficient balance"
    frame_dig -1
    b>=
    assert // insufficient balance
    // src/contract.py:194
    // if sender == recipient:  # prevent self-transfer balance increments
    frame_dig -3
    frame_dig -2
    ==
    bz _transfer_else_body@2
    // src/contract.py:59
    // self.balances = BoxMap(Account, BigUInt)
    byte "balances"
    // src/contract.py:195
    // self.balances[sender] = sender_balance  # current balance or zero
    frame_dig -3
    concat
    dup
    box_del
    pop
    swap
    box_put
    b _transfer_after_if_else@3

_transfer_else_body@2:
    // src/contract.py:59
    // self.balances = BoxMap(Account, BigUInt)
    byte "balances"
    // src/contract.py:197
    // self.balances[sender] = sender_balance - amount
    frame_dig -3
    concat
    swap
    frame_dig -1
    b-
    swap
    dup
    box_del
    pop
    swap
    box_put
    // src/contract.py:59
    // self.balances = BoxMap(Account, BigUInt)
    byte "balances"
    // src/contract.py:198
    // self.balances[recipient] = recipient_balance + amount
    frame_dig -2
    concat
    frame_dig 0
    frame_dig -1
    b+
    swap
    dup
    box_del
    pop
    swap
    box_put

_transfer_after_if_else@3:
    // src/contract.py:201
    // arc4.Address(sender), arc4.Address(recipient), arc4.UInt256(amount)
    frame_dig -1
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    frame_dig -1
    b|
    // src/contract.py:200-202
    // arc200_Transfer(
    //     arc4.Address(sender), arc4.Address(recipient), arc4.UInt256(amount)
    // )
    frame_dig -3
    frame_dig -2
    concat
    swap
    concat
    // src/contract.py:199-203
    // arc4.emit(
    //     arc200_Transfer(
    //         arc4.Address(sender), arc4.Address(recipient), arc4.UInt256(amount)
    //     )
    // )
    method "arc200_Transfer(address,address,uint256)"
    swap
    concat
    log
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_transfer(recipient: bytes, amount: bytes) -> bytes:
arc200_transfer:
    // src/contract.py:182-185
    // @arc4.abimethod
    // def arc200_transfer(
    //     self, recipient: arc4.Address, amount: arc4.UInt256
    // ) -> arc4.Bool:
    proto 2 1
    // src/contract.py:186
    // self._transfer(Txn.sender, recipient.native, amount.native)
    txn Sender
    frame_dig -2
    frame_dig -1
    callsub _transfer
    // src/contract.py:187
    // return arc4.Bool(True)
    byte 0x80
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_approve(spender: bytes, amount: bytes) -> bytes:
arc200_approve:
    // src/contract.py:205-206
    // @arc4.abimethod
    // def arc200_approve(self, spender: arc4.Address, amount: arc4.UInt256) -> arc4.Bool:
    proto 2 1
    // src/contract.py:207
    // self._approve(Txn.sender, spender.native, amount.native)
    txn Sender
    frame_dig -2
    frame_dig -1
    callsub _approve
    // src/contract.py:208
    // return arc4.Bool(True)
    byte 0x80
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.__init__() -> void:
__init__:
    // src/contract.py:124
    // def __init__(self) -> None:  # pragma: no cover
    proto 0 0
    // src/contract.py:125
    // super().__init__()
    callsub ARC200TokenInterface.__init__
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200TokenInterface.__init__() -> void:
ARC200TokenInterface.__init__:
    // src/contract.py:53
    // def __init__(self) -> None:
    proto 0 0
    // src/contract.py:54-55
    // # arc200 state
    // self.name = String()
    byte "name"
    byte ""
    app_global_put
    // src/contract.py:56
    // self.symbol = String()
    byte "symbol"
    byte ""
    app_global_put
    // src/contract.py:57
    // self.decimals = UInt64()
    byte "decimals"
    int 0
    app_global_put
    // src/contract.py:58
    // self.totalSupply = BigUInt()
    byte "totalSupply"
    byte 0x
    app_global_put
    retsub
