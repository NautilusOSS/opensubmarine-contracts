#pragma version 10

opensubmarine.contracts.token.ARC200.src.contract.OSARC200Token.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txn NumAppArgs
    bz main_bare_routing@23
    method "mint(address,byte[32],byte[8],uint8,uint256)void"
    method "kill()void"
    method "arc200_name()byte[32]"
    method "arc200_symbol()byte[8]"
    method "arc200_decimals()uint8"
    method "arc200_totalSupply()uint256"
    method "arc200_balanceOf(address)uint256"
    method "arc200_allowance(address,address)uint256"
    method "arc200_transferFrom(address,address,uint256)bool"
    method "arc200_transfer(address,uint256)bool"
    method "arc200_approve(address,uint256)bool"
    method "set_version(uint64,uint64)void"
    method "approve_update(bool)void"
    method "grant_upgrader(address)void"
    method "set_delegate(address)void"
    method "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void"
    method "transfer(address)void"
    txna ApplicationArgs 0
    match main_mint_route@4 main_kill_route@5 main_arc200_name_route@6 main_arc200_symbol_route@7 main_arc200_decimals_route@8 main_arc200_totalSupply_route@9 main_arc200_balanceOf_route@10 main_arc200_allowance_route@11 main_arc200_transferFrom_route@12 main_arc200_transfer_route@13 main_arc200_approve_route@14 main_set_version_route@15 main_approve_update_route@16 main_grant_upgrader_route@17 main_set_delegate_route@18 main_participate_route@19 main_transfer_route@20
    err // reject transaction

main_mint_route@4:
    // src/contract.py:243
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    // src/contract.py:243
    // @arc4.abimethod
    callsub mint
    int 1
    return

main_kill_route@5:
    // src/contract.py:276
    // @arc4.abimethod(allow_actions=[OnCompleteAction.DeleteApplication])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub kill
    int 1
    return

main_arc200_name_route@6:
    // src/contract.py:127
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc200_name
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_symbol_route@7:
    // src/contract.py:131
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc200_symbol
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_decimals_route@8:
    // src/contract.py:135
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc200_decimals
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_totalSupply_route@9:
    // src/contract.py:139
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc200_totalSupply
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_balanceOf_route@10:
    // src/contract.py:143
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    // src/contract.py:143
    // @arc4.abimethod(readonly=True)
    callsub arc200_balanceOf
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_allowance_route@11:
    // src/contract.py:151
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/contract.py:151
    // @arc4.abimethod(readonly=True)
    callsub arc200_allowance
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_transferFrom_route@12:
    // src/contract.py:164
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // src/contract.py:164
    // @arc4.abimethod
    callsub arc200_transferFrom
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_transfer_route@13:
    // src/contract.py:182
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/contract.py:182
    // @arc4.abimethod
    callsub arc200_transfer
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_arc200_approve_route@14:
    // src/contract.py:205
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/contract.py:205
    // @arc4.abimethod
    callsub arc200_approve
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_set_version_route@15:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:83
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:83
    // @arc4.abimethod
    callsub set_version
    int 1
    return

main_approve_update_route@16:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:101
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:101
    // @arc4.abimethod
    callsub approve_update
    int 1
    return

main_grant_upgrader_route@17:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:107
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:107
    // @arc4.abimethod
    callsub grant_upgrader
    int 1
    return

main_set_delegate_route@18:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:81
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:81
    // @arc4.abimethod
    callsub set_delegate
    int 1
    return

main_participate_route@19:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:89
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:89
    // @arc4.abimethod
    callsub participate
    int 1
    return

main_transfer_route@20:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/access/Ownable/contract.py:23
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    int 1
    return

main_bare_routing@23:
    // src/contract.py:220
    // class OSARC200Token(ARC200Token, Upgradeable, Deployable, Stakeable):
    int 0
    int 4
    txn OnCompletion
    match main_on_create@24 main_on_update@25
    err // reject transaction

main_on_create@24:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/factory/Deployable/contract.py:31
    // @arc4.baremethod(create="require")
    txn ApplicationID
    !
    assert // is creating
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/factory/Deployable/contract.py:31-32
    // @arc4.baremethod(create="require")
    // def on_create(self) -> None:
    callsub on_create
    int 1
    return

main_on_update@25:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:92
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // is not creating
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:92-93
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def on_update(self) -> None:
    callsub on_update
    int 1
    return


// opensubmarine.contracts.token.ARC200.src.contract.OSARC200Token.mint(receiver: bytes, name: bytes, symbol: bytes, decimals: bytes, totalSupply: bytes) -> void:
mint:
    // src/contract.py:243-251
    // @arc4.abimethod
    // def mint(
    //     self,
    //     receiver: arc4.Address,
    //     name: Bytes32,
    //     symbol: Bytes8,
    //     decimals: arc4.UInt8,
    //     totalSupply: arc4.UInt256,
    // ) -> None:
    proto 5 0
    // src/contract.py:255
    // assert self.owner == Global.zero_address, "owner not initialized"
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/access/Ownable/contract.py:21
    // self.owner = Account()
    byte "owner"
    // src/contract.py:255
    // assert self.owner == Global.zero_address, "owner not initialized"
    app_global_get_ex
    assert // check self.owner exists
    global ZeroAddress
    ==
    assert // owner not initialized
    // src/contract.py:256
    // assert self.name == "", "name not initialized"
    int 0
    // src/contract.py:54-55
    // # arc200 state
    // self.name = String()
    byte "name"
    // src/contract.py:256
    // assert self.name == "", "name not initialized"
    app_global_get_ex
    assert // check self.name exists
    byte ""
    ==
    assert // name not initialized
    // src/contract.py:257
    // assert self.symbol == "", "symbol not initialized"
    int 0
    // src/contract.py:56
    // self.symbol = String()
    byte "symbol"
    // src/contract.py:257
    // assert self.symbol == "", "symbol not initialized"
    app_global_get_ex
    assert // check self.symbol exists
    byte ""
    ==
    assert // symbol not initialized
    // src/contract.py:258
    // assert self.totalSupply == 0, "total supply not initialized"
    int 0
    // src/contract.py:58
    // self.totalSupply = BigUInt()
    byte "totalSupply"
    // src/contract.py:258
    // assert self.totalSupply == 0, "total supply not initialized"
    app_global_get_ex
    assert // check self.totalSupply exists
    byte 0x
    b==
    assert // total supply not initialized
    // src/contract.py:259
    // payment_amount = require_payment(Txn.sender)
    txn Sender
    callsub require_payment
    // src/contract.py:260
    // assert payment_amount >= mint_fee, "payment amount accurate"
    int 1000000
    >=
    assert // payment amount accurate
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/access/Ownable/contract.py:21
    // self.owner = Account()
    byte "owner"
    // src/contract.py:261
    // self.owner = Global.creator_address
    global CreatorAddress
    app_global_put
    // src/contract.py:54-55
    // # arc200 state
    // self.name = String()
    byte "name"
    // src/contract.py:262
    // self.name = String.from_bytes(name.bytes)
    frame_dig -4
    app_global_put
    // src/contract.py:56
    // self.symbol = String()
    byte "symbol"
    // src/contract.py:263
    // self.symbol = String.from_bytes(symbol.bytes)
    frame_dig -3
    app_global_put
    // src/contract.py:264
    // self.decimals = decimals.native
    frame_dig -2
    btoi
    // src/contract.py:57
    // self.decimals = UInt64()
    byte "decimals"
    // src/contract.py:264
    // self.decimals = decimals.native
    swap
    app_global_put
    // src/contract.py:58
    // self.totalSupply = BigUInt()
    byte "totalSupply"
    // src/contract.py:265
    // self.totalSupply = totalSupply.native
    frame_dig -1
    app_global_put
    // src/contract.py:59
    // self.balances = BoxMap(Account, BigUInt)
    byte "balances"
    // src/contract.py:266
    // self.balances[receiver.native] = totalSupply.native
    frame_dig -5
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    // src/contract.py:269
    // arc4.Address(Global.zero_address),
    global ZeroAddress
    // src/contract.py:268-272
    // arc200_Transfer(
    //     arc4.Address(Global.zero_address),
    //     receiver,
    //     totalSupply,
    // )
    frame_dig -5
    concat
    frame_dig -1
    concat
    // src/contract.py:267-273
    // arc4.emit(
    //     arc200_Transfer(
    //         arc4.Address(Global.zero_address),
    //         receiver,
    //         totalSupply,
    //     )
    // )
    method "arc200_Transfer(address,address,uint256)"
    swap
    concat
    log
    // src/contract.py:274
    // itxn.Payment(receiver=Global.creator_address, amount=mint_fee, fee=0).submit()
    itxn_begin
    global CreatorAddress
    int 1000000
    itxn_field Amount
    itxn_field Receiver
    int pay
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    retsub


// opensubmarine.utils.algorand.require_payment(who: bytes) -> uint64:
require_payment:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:15-23
    // ##############################################
    // # function: require_payment (internal)
    // # arguments: None
    // # purpose: check payment
    // # pre-conditions: None
    // # post-conditions: None
    // ##############################################
    // @subroutine
    // def require_payment(who: Account) -> UInt64:
    proto 1 1
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:24
    // ref_group_index = Txn.group_index
    txn GroupIndex
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:25
    // assert ref_group_index > 0, "group index greater than zero"
    dup
    assert // group index greater than zero
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:26
    // payment_group_index = ref_group_index - 1
    int 1
    -
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:28
    // gtxn.PaymentTransaction(payment_group_index).sender == who
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    dup
    gtxns Sender
    frame_dig -1
    ==
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:27-29
    // assert (
    //     gtxn.PaymentTransaction(payment_group_index).sender == who
    // ), "payment sender accurate"
    assert // payment sender accurate
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:31
    // gtxn.PaymentTransaction(payment_group_index).receiver
    dup
    gtxns Receiver
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:32
    // == Global.current_application_address
    global CurrentApplicationAddress
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:31-32
    // gtxn.PaymentTransaction(payment_group_index).receiver
    // == Global.current_application_address
    ==
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:30-33
    // assert (
    //     gtxn.PaymentTransaction(payment_group_index).receiver
    //     == Global.current_application_address
    // ), "payment receiver accurate"
    assert // payment receiver accurate
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:34
    // return gtxn.PaymentTransaction(payment_group_index).amount
    gtxns Amount
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.OSARC200Token.kill() -> void:
kill:
    // src/contract.py:276-277
    // @arc4.abimethod(allow_actions=[OnCompleteAction.DeleteApplication])
    // def kill(self) -> None:
    proto 0 0
    // src/contract.py:281
    // assert Txn.sender == self.upgrader, "must be upgrader"
    txn Sender
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // src/contract.py:281
    // assert Txn.sender == self.upgrader, "must be upgrader"
    app_global_get_ex
    assert // check self.upgrader exists
    ==
    assert // must be upgrader
    // src/contract.py:282
    // close_offline_on_delete(Txn.sender)
    txn Sender
    callsub close_offline_on_delete
    retsub


// opensubmarine.utils.algorand.close_offline_on_delete(close_remainder_to: bytes) -> void:
close_offline_on_delete:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:50-52
    // ##############################################
    // @subroutine
    // def close_offline_on_delete(close_remainder_to: Account) -> None:
    proto 1 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:53
    // oca = Txn.on_completion
    txn OnCompletion
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:54
    // if oca == OnCompleteAction.DeleteApplication:
    int DeleteApplication
    ==
    assert
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:70
    // receiver=Global.creator_address,
    global CreatorAddress
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:73
    // amount=op.Global.min_balance,
    global MinBalance
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:75
    // itxn.submit_txns(keyreg_txn, pmt_txn)
    itxn_begin
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:64-66
    // state_proof_key=Bytes.from_base64(
    //     "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="
    // ),
    byte base64 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
    itxn_field StateProofPK
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:63
    // vote_key_dilution=UInt64(0),
    int 0
    itxn_field VoteKeyDilution
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:62
    // vote_last=UInt64(0),
    int 0
    itxn_field VoteLast
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:61
    // vote_first=UInt64(0),
    int 0
    itxn_field VoteFirst
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:58-60
    // selection_key=Bytes.from_base64(
    //     "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
    // ),
    byte base64 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
    itxn_field SelectionPK
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:57
    // vote_key=Bytes.from_base64("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="),
    byte base64 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
    itxn_field VotePK
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:56
    // non_participation=True,
    int 1
    itxn_field Nonparticipation
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:55
    // keyreg_txn = itxn.KeyRegistration(
    int keyreg
    itxn_field TypeEnum
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:67
    // fee=0,
    int 0
    itxn_field Fee
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:75
    // itxn.submit_txns(keyreg_txn, pmt_txn)
    itxn_next
    itxn_field Amount
    frame_dig -1
    itxn_field CloseRemainderTo
    itxn_field Receiver
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:69
    // pmt_txn = itxn.Payment(
    int pay
    itxn_field TypeEnum
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:72
    // fee=0,
    int 0
    itxn_field Fee
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/utils/algorand.py:75
    // itxn.submit_txns(keyreg_txn, pmt_txn)
    itxn_submit
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_name() -> bytes:
arc200_name:
    // src/contract.py:127-128
    // @arc4.abimethod(readonly=True)
    // def arc200_name(self) -> Bytes32:
    proto 0 1
    // src/contract.py:129
    // return Bytes32.from_bytes(self.name.bytes)
    int 0
    // src/contract.py:54-55
    // # arc200 state
    // self.name = String()
    byte "name"
    // src/contract.py:129
    // return Bytes32.from_bytes(self.name.bytes)
    app_global_get_ex
    assert // check self.name exists
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_symbol() -> bytes:
arc200_symbol:
    // src/contract.py:131-132
    // @arc4.abimethod(readonly=True)
    // def arc200_symbol(self) -> Bytes8:
    proto 0 1
    // src/contract.py:133
    // return Bytes8.from_bytes(self.symbol.bytes)
    int 0
    // src/contract.py:56
    // self.symbol = String()
    byte "symbol"
    // src/contract.py:133
    // return Bytes8.from_bytes(self.symbol.bytes)
    app_global_get_ex
    assert // check self.symbol exists
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_decimals() -> bytes:
arc200_decimals:
    // src/contract.py:135-136
    // @arc4.abimethod(readonly=True)
    // def arc200_decimals(self) -> arc4.UInt8:
    proto 0 1
    // src/contract.py:137
    // return arc4.UInt8(self.decimals)
    int 0
    // src/contract.py:57
    // self.decimals = UInt64()
    byte "decimals"
    // src/contract.py:137
    // return arc4.UInt8(self.decimals)
    app_global_get_ex
    assert // check self.decimals exists
    itob
    extract 7 1
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_totalSupply() -> bytes:
arc200_totalSupply:
    // src/contract.py:139-140
    // @arc4.abimethod(readonly=True)
    // def arc200_totalSupply(self) -> arc4.UInt256:
    proto 0 1
    // src/contract.py:141
    // return arc4.UInt256(self.totalSupply)
    int 0
    // src/contract.py:58
    // self.totalSupply = BigUInt()
    byte "totalSupply"
    // src/contract.py:141
    // return arc4.UInt256(self.totalSupply)
    app_global_get_ex
    assert // check self.totalSupply exists
    dup
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    b|
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_balanceOf(account: bytes) -> bytes:
arc200_balanceOf:
    // src/contract.py:143-144
    // @arc4.abimethod(readonly=True)
    // def arc200_balanceOf(self, account: arc4.Address) -> arc4.UInt256:
    proto 1 1
    // src/contract.py:145
    // return arc4.UInt256(self._balanceOf(account.native))
    frame_dig -1
    callsub _balanceOf
    dup
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    b|
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._balanceOf(account: bytes) -> bytes:
_balanceOf:
    // src/contract.py:147-148
    // @subroutine
    // def _balanceOf(self, account: Account) -> BigUInt:
    proto 1 1
    // src/contract.py:59
    // self.balances = BoxMap(Account, BigUInt)
    byte "balances"
    // src/contract.py:149
    // return self.balances.get(key=account, default=BigUInt(0))
    frame_dig -1
    concat
    box_get
    byte 0x
    cover 2
    select
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_allowance(owner: bytes, spender: bytes) -> bytes:
arc200_allowance:
    // src/contract.py:151-154
    // @arc4.abimethod(readonly=True)
    // def arc200_allowance(
    //     self, owner: arc4.Address, spender: arc4.Address
    // ) -> arc4.UInt256:
    proto 2 1
    // src/contract.py:155
    // return arc4.UInt256(self._allowance(owner.native, spender.native))
    frame_dig -2
    frame_dig -1
    callsub _allowance
    dup
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    b|
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._allowance(owner: bytes, spender: bytes) -> bytes:
_allowance:
    // src/contract.py:157-158
    // @subroutine
    // def _allowance(self, owner: Account, spender: Account) -> BigUInt:
    proto 2 1
    // src/contract.py:160
    // key=op.sha256(owner.bytes + spender.bytes),
    frame_dig -2
    frame_dig -1
    concat
    sha256
    // src/contract.py:60
    // self.approvals = BoxMap(Bytes, BigUInt)
    byte "approvals"
    // src/contract.py:159-162
    // return self.approvals.get(
    //     key=op.sha256(owner.bytes + spender.bytes),
    //     default=BigUInt(0),
    // )
    swap
    concat
    box_get
    // src/contract.py:161
    // default=BigUInt(0),
    byte 0x
    // src/contract.py:159-162
    // return self.approvals.get(
    //     key=op.sha256(owner.bytes + spender.bytes),
    //     default=BigUInt(0),
    // )
    cover 2
    select
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_transferFrom(sender: bytes, recipient: bytes, amount: bytes) -> bytes:
arc200_transferFrom:
    // src/contract.py:164-167
    // @arc4.abimethod
    // def arc200_transferFrom(
    //     self, sender: arc4.Address, recipient: arc4.Address, amount: arc4.UInt256
    // ) -> arc4.Bool:
    proto 3 1
    // src/contract.py:168
    // self._transferFrom(sender.native, recipient.native, amount.native)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub _transferFrom
    // src/contract.py:169
    // return arc4.Bool(True)
    byte 0x80
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._transferFrom(sender: bytes, recipient: bytes, amount: bytes) -> void:
_transferFrom:
    // src/contract.py:171-174
    // @subroutine
    // def _transferFrom(
    //     self, sender: Account, recipient: Account, amount: BigUInt
    // ) -> None:
    proto 3 0
    // src/contract.py:175
    // spender = Txn.sender
    txn Sender
    // src/contract.py:176
    // spender_allowance = self._allowance(sender, spender)
    frame_dig -3
    dig 1
    callsub _allowance
    // src/contract.py:177
    // assert spender_allowance >= amount, "insufficient approval"
    dup
    frame_dig -1
    b>=
    assert // insufficient approval
    // src/contract.py:178
    // new_spender_allowance = spender_allowance - amount
    frame_dig -1
    b-
    // src/contract.py:179
    // self._approve(sender, spender, new_spender_allowance)
    frame_dig -3
    cover 2
    callsub _approve
    // src/contract.py:180
    // self._transfer(sender, recipient, amount)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub _transfer
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._approve(owner: bytes, spender: bytes, amount: bytes) -> void:
_approve:
    // src/contract.py:210-211
    // @subroutine
    // def _approve(self, owner: Account, spender: Account, amount: BigUInt) -> None:
    proto 3 0
    // src/contract.py:212
    // self.approvals[op.sha256(owner.bytes + spender.bytes)] = amount
    frame_dig -3
    frame_dig -2
    concat
    dup
    sha256
    // src/contract.py:60
    // self.approvals = BoxMap(Bytes, BigUInt)
    byte "approvals"
    // src/contract.py:212
    // self.approvals[op.sha256(owner.bytes + spender.bytes)] = amount
    swap
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    // src/contract.py:215
    // arc4.Address(owner), arc4.Address(spender), arc4.UInt256(amount)
    frame_dig -1
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    frame_dig -1
    b|
    // src/contract.py:214-216
    // arc200_Approval(
    //     arc4.Address(owner), arc4.Address(spender), arc4.UInt256(amount)
    // )
    concat
    // src/contract.py:213-217
    // arc4.emit(
    //     arc200_Approval(
    //         arc4.Address(owner), arc4.Address(spender), arc4.UInt256(amount)
    //     )
    // )
    method "arc200_Approval(address,address,uint256)"
    swap
    concat
    log
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token._transfer(sender: bytes, recipient: bytes, amount: bytes) -> void:
_transfer:
    // src/contract.py:189-190
    // @subroutine
    // def _transfer(self, sender: Account, recipient: Account, amount: BigUInt) -> None:
    proto 3 0
    // src/contract.py:191
    // sender_balance = self._balanceOf(sender)
    frame_dig -3
    callsub _balanceOf
    dup
    // src/contract.py:192
    // recipient_balance = self._balanceOf(recipient)
    frame_dig -2
    callsub _balanceOf
    cover 2
    // src/contract.py:193
    // assert sender_balance >= amount, "insufficient balance"
    frame_dig -1
    b>=
    assert // insufficient balance
    // src/contract.py:194
    // if sender == recipient:  # prevent self-transfer balance increments
    frame_dig -3
    frame_dig -2
    ==
    bz _transfer_else_body@2
    // src/contract.py:59
    // self.balances = BoxMap(Account, BigUInt)
    byte "balances"
    // src/contract.py:195
    // self.balances[sender] = sender_balance  # current balance or zero
    frame_dig -3
    concat
    dup
    box_del
    pop
    swap
    box_put
    b _transfer_after_if_else@3

_transfer_else_body@2:
    // src/contract.py:59
    // self.balances = BoxMap(Account, BigUInt)
    byte "balances"
    // src/contract.py:197
    // self.balances[sender] = sender_balance - amount
    frame_dig -3
    concat
    swap
    frame_dig -1
    b-
    swap
    dup
    box_del
    pop
    swap
    box_put
    // src/contract.py:59
    // self.balances = BoxMap(Account, BigUInt)
    byte "balances"
    // src/contract.py:198
    // self.balances[recipient] = recipient_balance + amount
    frame_dig -2
    concat
    frame_dig 0
    frame_dig -1
    b+
    swap
    dup
    box_del
    pop
    swap
    box_put

_transfer_after_if_else@3:
    // src/contract.py:201
    // arc4.Address(sender), arc4.Address(recipient), arc4.UInt256(amount)
    frame_dig -1
    len
    int 32
    <=
    assert // overflow
    int 32
    bzero
    frame_dig -1
    b|
    // src/contract.py:200-202
    // arc200_Transfer(
    //     arc4.Address(sender), arc4.Address(recipient), arc4.UInt256(amount)
    // )
    frame_dig -3
    frame_dig -2
    concat
    swap
    concat
    // src/contract.py:199-203
    // arc4.emit(
    //     arc200_Transfer(
    //         arc4.Address(sender), arc4.Address(recipient), arc4.UInt256(amount)
    //     )
    // )
    method "arc200_Transfer(address,address,uint256)"
    swap
    concat
    log
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_transfer(recipient: bytes, amount: bytes) -> bytes:
arc200_transfer:
    // src/contract.py:182-185
    // @arc4.abimethod
    // def arc200_transfer(
    //     self, recipient: arc4.Address, amount: arc4.UInt256
    // ) -> arc4.Bool:
    proto 2 1
    // src/contract.py:186
    // self._transfer(Txn.sender, recipient.native, amount.native)
    txn Sender
    frame_dig -2
    frame_dig -1
    callsub _transfer
    // src/contract.py:187
    // return arc4.Bool(True)
    byte 0x80
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.ARC200Token.arc200_approve(spender: bytes, amount: bytes) -> bytes:
arc200_approve:
    // src/contract.py:205-206
    // @arc4.abimethod
    // def arc200_approve(self, spender: arc4.Address, amount: arc4.UInt256) -> arc4.Bool:
    proto 2 1
    // src/contract.py:207
    // self._approve(Txn.sender, spender.native, amount.native)
    txn Sender
    frame_dig -2
    frame_dig -1
    callsub _approve
    // src/contract.py:208
    // return arc4.Bool(True)
    byte 0x80
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.set_version(contract_version: bytes, deployment_version: bytes) -> void:
set_version:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:83-86
    // @arc4.abimethod
    // def set_version(
    //     self, contract_version: arc4.UInt64, deployment_version: arc4.UInt64
    // ) -> None:
    proto 2 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:87
    // assert Txn.sender == self.upgrader, "must be upgrader"
    txn Sender
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:87
    // assert Txn.sender == self.upgrader, "must be upgrader"
    app_global_get_ex
    assert // check self.upgrader exists
    ==
    assert // must be upgrader
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:88
    // arc4.emit(VersionUpdated(contract_version, deployment_version))
    frame_dig -2
    frame_dig -1
    concat
    method "VersionUpdated(uint64,uint64)"
    swap
    concat
    log
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:89
    // self.contract_version = contract_version.native
    frame_dig -2
    btoi
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:31
    // self.contract_version = UInt64()
    byte "contract_version"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:89
    // self.contract_version = contract_version.native
    swap
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:90
    // self.deployment_version = deployment_version.native
    frame_dig -1
    btoi
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:32
    // self.deployment_version = UInt64()
    byte "deployment_version"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:90
    // self.deployment_version = deployment_version.native
    swap
    app_global_put
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.approve_update(approval: bytes) -> void:
approve_update:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:101-102
    // @arc4.abimethod
    // def approve_update(self, approval: arc4.Bool) -> None:
    proto 1 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:103
    // assert Txn.sender == self.owner, "must be owner"
    txn Sender
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/access/Ownable/contract.py:21
    // self.owner = Account()
    byte "owner"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:103
    // assert Txn.sender == self.owner, "must be owner"
    app_global_get_ex
    assert // check self.owner exists
    ==
    assert // must be owner
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:104
    // arc4.emit(UpdateApproved(arc4.Address(self.owner), approval))
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/access/Ownable/contract.py:21
    // self.owner = Account()
    byte "owner"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:104
    // arc4.emit(UpdateApproved(arc4.Address(self.owner), approval))
    app_global_get_ex
    assert // check self.owner exists
    frame_dig -1
    concat
    method "UpdateApproved(address,bool)"
    swap
    concat
    log
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:105
    // self.updatable = approval.native
    frame_dig -1
    int 0
    getbit
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:33
    // self.updatable = bool(1)
    byte "updatable"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:105
    // self.updatable = approval.native
    swap
    app_global_put
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.grant_upgrader(upgrader: bytes) -> void:
grant_upgrader:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:107-108
    // @arc4.abimethod
    // def grant_upgrader(self, upgrader: arc4.Address) -> None:
    proto 1 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:109
    // assert Txn.sender == Global.creator_address, "must be creator"
    txn Sender
    global CreatorAddress
    ==
    assert // must be creator
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:110
    // arc4.emit(UpgraderGranted(arc4.Address(self.upgrader), upgrader))
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:110
    // arc4.emit(UpgraderGranted(arc4.Address(self.upgrader), upgrader))
    app_global_get_ex
    assert // check self.upgrader exists
    frame_dig -1
    concat
    method "UpgraderGranted(address,address)"
    swap
    concat
    log
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:111
    // self.upgrader = upgrader.native
    frame_dig -1
    app_global_put
    retsub


// opensubmarine.contracts.participation.Stakable.contract.Stakeable.set_delegate(delegate: bytes) -> void:
set_delegate:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:81-82
    // @arc4.abimethod
    // def set_delegate(self, delegate: arc4.Address) -> None:
    proto 1 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:84
    // Txn.sender == self.owner or Txn.sender == Global.creator_address
    txn Sender
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/access/Ownable/contract.py:21
    // self.owner = Account()
    byte "owner"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:84
    // Txn.sender == self.owner or Txn.sender == Global.creator_address
    app_global_get_ex
    assert // check self.owner exists
    ==
    bnz set_delegate_bool_true@2
    txn Sender
    global CreatorAddress
    ==
    bz set_delegate_bool_false@3

set_delegate_bool_true@2:
    int 1
    b set_delegate_bool_merge@4

set_delegate_bool_false@3:
    int 0

set_delegate_bool_merge@4:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:83-85
    // assert (
    //     Txn.sender == self.owner or Txn.sender == Global.creator_address
    // ), "must be owner or creator"
    assert // must be owner or creator
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:86
    // arc4.emit(DelegateUpdated(arc4.Address(self.delegate), delegate))
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:47
    // self.delegate = Account()
    byte "delegate"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:86
    // arc4.emit(DelegateUpdated(arc4.Address(self.delegate), delegate))
    app_global_get_ex
    assert // check self.delegate exists
    frame_dig -1
    concat
    method "DelegateUpdated(address,address)"
    swap
    concat
    log
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:47
    // self.delegate = Account()
    byte "delegate"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:87
    // self.delegate = delegate.native
    frame_dig -1
    app_global_put
    retsub


// opensubmarine.contracts.participation.Stakable.contract.Stakeable.participate(vote_k: bytes, sel_k: bytes, vote_fst: bytes, vote_lst: bytes, vote_kd: bytes, sp_key: bytes) -> void:
participate:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:89-98
    // @arc4.abimethod
    // def participate(
    //     self,
    //     vote_k: Bytes32,
    //     sel_k: Bytes32,
    //     vote_fst: arc4.UInt64,
    //     vote_lst: arc4.UInt64,
    //     vote_kd: arc4.UInt64,
    //     sp_key: Bytes64,
    // ) -> None:
    proto 6 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:101
    // Txn.sender == self.owner or Txn.sender == self.delegate
    txn Sender
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/access/Ownable/contract.py:21
    // self.owner = Account()
    byte "owner"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:101
    // Txn.sender == self.owner or Txn.sender == self.delegate
    app_global_get_ex
    assert // check self.owner exists
    ==
    bnz participate_bool_true@2
    txn Sender
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:47
    // self.delegate = Account()
    byte "delegate"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:101
    // Txn.sender == self.owner or Txn.sender == self.delegate
    app_global_get_ex
    assert // check self.delegate exists
    ==
    bz participate_bool_false@3

participate_bool_true@2:
    int 1
    b participate_bool_merge@4

participate_bool_false@3:
    int 0

participate_bool_merge@4:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:99-102
    // ###########################################
    // assert (
    //     Txn.sender == self.owner or Txn.sender == self.delegate
    // ), "must be owner or delegate"
    assert // must be owner or delegate
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:103-104
    // ###########################################
    // key_reg_fee = Global.min_txn_fee
    global MinTxnFee
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:105-106
    // # require payment of min fee to prevent draining
    // assert require_payment(Txn.sender) == key_reg_fee, "payment amout accurate"
    txn Sender
    callsub opensubmarine.contracts.token.ARC200.src.utils.require_payment
    dig 1
    ==
    assert // payment amout accurate
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:110
    // arc4.Address(Txn.sender),
    txn Sender
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:112
    // address=arc4.Address(Txn.sender),
    dup
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:111-119
    // PartKeyInfo(
    //     address=arc4.Address(Txn.sender),
    //     vote_key=vote_k,
    //     selection_key=sel_k,
    //     vote_first=vote_fst,
    //     vote_last=vote_lst,
    //     vote_key_dilution=vote_kd,
    //     state_proof_key=sp_key,
    // ),
    frame_dig -6
    concat
    frame_dig -5
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:109-120
    // Participated(
    //     arc4.Address(Txn.sender),
    //     PartKeyInfo(
    //         address=arc4.Address(Txn.sender),
    //         vote_key=vote_k,
    //         selection_key=sel_k,
    //         vote_first=vote_fst,
    //         vote_last=vote_lst,
    //         vote_key_dilution=vote_kd,
    //         state_proof_key=sp_key,
    //     ),
    // )
    concat
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:107-121
    // ###########################################
    // arc4.emit(
    //     Participated(
    //         arc4.Address(Txn.sender),
    //         PartKeyInfo(
    //             address=arc4.Address(Txn.sender),
    //             vote_key=vote_k,
    //             selection_key=sel_k,
    //             vote_first=vote_fst,
    //             vote_last=vote_lst,
    //             vote_key_dilution=vote_kd,
    //             state_proof_key=sp_key,
    //         ),
    //     )
    // )
    method "Participated(address,(address,byte[32],byte[32],uint64,uint64,uint64,byte[64]))"
    swap
    concat
    log
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:122-130
    // itxn.KeyRegistration(
    //     vote_key=vote_k.bytes,
    //     selection_key=sel_k.bytes,
    //     vote_first=vote_fst.native,
    //     vote_last=vote_lst.native,
    //     vote_key_dilution=vote_kd.native,
    //     state_proof_key=sp_key.bytes,
    //     fee=key_reg_fee,
    // ).submit()
    itxn_begin
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:125
    // vote_first=vote_fst.native,
    frame_dig -4
    btoi
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:126
    // vote_last=vote_lst.native,
    frame_dig -3
    btoi
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:127
    // vote_key_dilution=vote_kd.native,
    frame_dig -2
    btoi
    frame_dig -1
    itxn_field StateProofPK
    itxn_field VoteKeyDilution
    itxn_field VoteLast
    itxn_field VoteFirst
    frame_dig -5
    itxn_field SelectionPK
    frame_dig -6
    itxn_field VotePK
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:122
    // itxn.KeyRegistration(
    int keyreg
    itxn_field TypeEnum
    itxn_field Fee
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:122-130
    // itxn.KeyRegistration(
    //     vote_key=vote_k.bytes,
    //     selection_key=sel_k.bytes,
    //     vote_first=vote_fst.native,
    //     vote_last=vote_lst.native,
    //     vote_key_dilution=vote_kd.native,
    //     state_proof_key=sp_key.bytes,
    //     fee=key_reg_fee,
    // ).submit()
    itxn_submit
    retsub


// opensubmarine.contracts.token.ARC200.src.utils.require_payment(who: bytes) -> uint64:
opensubmarine.contracts.token.ARC200.src.utils.require_payment:
    // src/utils.py:15-23
    // ##############################################
    // # function: require_payment (internal)
    // # arguments: None
    // # purpose: check payment
    // # pre-conditions: None
    // # post-conditions: None
    // ##############################################
    // @subroutine
    // def require_payment(who: Account) -> UInt64:
    proto 1 1
    // src/utils.py:24
    // ref_group_index = Txn.group_index
    txn GroupIndex
    // src/utils.py:25
    // assert ref_group_index > 0, "group index greater than zero"
    dup
    assert // group index greater than zero
    // src/utils.py:26
    // payment_group_index = ref_group_index - 1
    int 1
    -
    // src/utils.py:28
    // gtxn.PaymentTransaction(payment_group_index).sender == who
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    dup
    gtxns Sender
    frame_dig -1
    ==
    // src/utils.py:27-29
    // assert (
    //     gtxn.PaymentTransaction(payment_group_index).sender == who
    // ), "payment sender accurate"
    assert // payment sender accurate
    // src/utils.py:31
    // gtxn.PaymentTransaction(payment_group_index).receiver
    dup
    gtxns Receiver
    // src/utils.py:32
    // == Global.current_application_address
    global CurrentApplicationAddress
    // src/utils.py:31-32
    // gtxn.PaymentTransaction(payment_group_index).receiver
    // == Global.current_application_address
    ==
    // src/utils.py:30-33
    // assert (
    //     gtxn.PaymentTransaction(payment_group_index).receiver
    //     == Global.current_application_address
    // ), "payment receiver accurate"
    assert // payment receiver accurate
    // src/utils.py:34
    // return gtxn.PaymentTransaction(payment_group_index).amount
    gtxns Amount
    retsub


// opensubmarine.contracts.factory.Deployable.contract.Deployable.on_create() -> void:
on_create:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/factory/Deployable/contract.py:31-32
    // @arc4.baremethod(create="require")
    // def on_create(self) -> None:
    proto 0 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/factory/Deployable/contract.py:33
    // caller_id = Global.caller_application_id
    global CallerApplicationID
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/factory/Deployable/contract.py:34
    // assert caller_id > 0, "must be created by factory"
    dup
    assert // must be created by factory
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/factory/Deployable/contract.py:16
    // self.parent_id = UInt64()
    byte "parent_id"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/factory/Deployable/contract.py:35
    // self.parent_id = caller_id
    swap
    app_global_put
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.on_update() -> void:
on_update:
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:92-93
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def on_update(self) -> None:
    proto 0 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:94-97
    // ##########################################
    // # WARNING: This app can be updated by the creator
    // ##########################################
    // assert Txn.sender == self.upgrader, "must be upgrader"
    txn Sender
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:94-97
    // ##########################################
    // # WARNING: This app can be updated by the creator
    // ##########################################
    // assert Txn.sender == self.upgrader, "must be upgrader"
    app_global_get_ex
    assert // check self.upgrader exists
    ==
    assert // must be upgrader
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:98
    // assert self.updatable == UInt64(1), "not approved"
    int 0
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:33
    // self.updatable = bool(1)
    byte "updatable"
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:98
    // assert self.updatable == UInt64(1), "not approved"
    app_global_get_ex
    assert // check self.updatable exists
    int 1
    ==
    assert // not approved
    retsub


// opensubmarine.contracts.token.ARC200.src.contract.OSARC200Token.__init__() -> void:
__init__:
    // src/contract.py:221
    // def __init__(self) -> None:  # pragma: no cover
    proto 0 0
    // src/contract.py:54-55
    // # arc200 state
    // self.name = String()
    byte "name"
    // src/contract.py:222-223
    // # arc200 state
    // self.name = String()
    byte ""
    app_global_put
    // src/contract.py:56
    // self.symbol = String()
    byte "symbol"
    // src/contract.py:224
    // self.symbol = String()
    byte ""
    app_global_put
    // src/contract.py:57
    // self.decimals = UInt64()
    byte "decimals"
    // src/contract.py:225
    // self.decimals = UInt64()
    int 0
    app_global_put
    // src/contract.py:58
    // self.totalSupply = BigUInt()
    byte "totalSupply"
    // src/contract.py:226
    // self.totalSupply = BigUInt()
    byte 0x
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/factory/Deployable/contract.py:16
    // self.parent_id = UInt64()
    byte "parent_id"
    // src/contract.py:227-230
    // # balances
    // # approvals
    // # deployable state
    // self.parent_id = UInt64()
    int 0
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/factory/Deployable/contract.py:17
    // self.deployer = Account()
    byte "deployer"
    // src/contract.py:231
    // self.deployer = Account()
    global ZeroAddress
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/access/Ownable/contract.py:21
    // self.owner = Account()
    byte "owner"
    // src/contract.py:232-233
    // # ownable state
    // self.owner = Account()
    global ZeroAddress
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:31
    // self.contract_version = UInt64()
    byte "contract_version"
    // src/contract.py:234-235
    // # upgradeable state
    // self.contract_version = UInt64(1)
    int 1
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:32
    // self.deployment_version = UInt64()
    byte "deployment_version"
    // src/contract.py:236
    // self.deployment_version = UInt64()
    int 0
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:33
    // self.updatable = bool(1)
    byte "updatable"
    // src/contract.py:237
    // self.updatable = bool(1)
    int 1
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // src/contract.py:238
    // self.upgrader = Global.creator_address
    global CreatorAddress
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:47
    // self.delegate = Account()
    byte "delegate"
    // src/contract.py:239-240
    // # stakeable state
    // self.delegate = Account()
    global ZeroAddress
    app_global_put
    // /Users/nicholasshellabarger/Desktop/repos/opensubmarine-contracts/src/opensubmarine/contracts/participation/Stakable/contract.py:48
    // self.stakeable = bool(1)
    byte "stakeable"
    // src/contract.py:241
    // self.stakeable = bool(1)
    int 1
    app_global_put
    retsub
