{
    "hints": {
        "arc200_name()byte[32]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_symbol()byte[8]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_decimals()uint8": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_totalSupply()uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_balanceOf(address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_allowance(address,address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_transferFrom(address,address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_transfer(address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_approve(address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpvcGVuc3VibWFyaW5lLmNvbnRyYWN0cy50b2tlbi5BUkMyMDAuc3JjLmNvbnRyYWN0LkFSQzIwMFRva2VuLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTIzCiAgICAvLyBjbGFzcyBBUkMyMDBUb2tlbihBUkMyMDBUb2tlbkludGVyZmFjZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "decimals": {
                    "type": "uint64",
                    "key": "decimals"
                },
                "name": {
                    "type": "bytes",
                    "key": "name"
                },
                "symbol": {
                    "type": "bytes",
                    "key": "symbol"
                },
                "totalSupply": {
                    "type": "bytes",
                    "key": "totalSupply"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ARC200Token",
        "methods": [
            {
                "name": "arc200_name",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[32]"
                }
            },
            {
                "name": "arc200_symbol",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[8]"
                }
            },
            {
                "name": "arc200_decimals",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "arc200_totalSupply",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_balanceOf",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_allowance",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "address",
                        "name": "spender"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_transferFrom",
                "args": [
                    {
                        "type": "address",
                        "name": "sender"
                    },
                    {
                        "type": "address",
                        "name": "recipient"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc200_transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "recipient"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc200_approve",
                "args": [
                    {
                        "type": "address",
                        "name": "spender"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}