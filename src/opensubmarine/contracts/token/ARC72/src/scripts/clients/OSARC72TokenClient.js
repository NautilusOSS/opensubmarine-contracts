/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import { AtomicTransactionComposer, modelsv2 } from 'algosdk';
export const APP_SPEC = {
    "hints": {
        "_staking_delegate(uint512)address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mint(address,uint64,address)uint256": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "burn(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_remote_delegate(address,uint256)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "kill()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "post_update()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_tokenURI(uint256)byte[256]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_ownerOf(uint256)address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_transferFrom(address,address,uint256)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_approve(address,uint256)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_setApprovalForAll(address,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_getApproved(uint256)address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_isApprovedForAll(address,address)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_balanceOf(address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_totalSupply()uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc72_tokenByIndex(uint256)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "supportsInterface(byte[4])bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_version(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_update(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "grant_upgrader(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_delegate(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5PU0FSQzcyVG9rZW4uY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTAyMAogICAgLy8gY2xhc3MgT1NBUkM3MlRva2VuKEFSQzcyVG9rZW4sIFVwZ3JhZGVhYmxlLCBTdGFrZWFibGUpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "contract_version": {
                    "type": "uint64",
                    "key": "contract_version"
                },
                "delegate": {
                    "type": "bytes",
                    "key": "delegate"
                },
                "deployment_version": {
                    "type": "uint64",
                    "key": "deployment_version"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "stakeable": {
                    "type": "uint64",
                    "key": "stakeable"
                },
                "totalSupply": {
                    "type": "bytes",
                    "key": "totalSupply"
                },
                "updatable": {
                    "type": "uint64",
                    "key": "updatable"
                },
                "upgrader": {
                    "type": "bytes",
                    "key": "upgrader"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "OSARC72Token",
        "methods": [
            {
                "name": "_staking_delegate",
                "args": [
                    {
                        "type": "uint512",
                        "name": "tokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "mint",
                "args": [
                    {
                        "type": "address",
                        "name": "to"
                    },
                    {
                        "type": "uint64",
                        "name": "tokenId"
                    },
                    {
                        "type": "address",
                        "name": "delegate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint256"
                },
                "desc": "Mint a new NFT"
            },
            {
                "name": "burn",
                "args": [
                    {
                        "type": "uint64",
                        "name": "tokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Burn an NFT"
            },
            {
                "name": "set_remote_delegate",
                "args": [
                    {
                        "type": "address",
                        "name": "delegate"
                    },
                    {
                        "type": "uint256",
                        "name": "tokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set delegate"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "tokenId"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remote withdraw"
            },
            {
                "name": "kill",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Kill contract"
            },
            {
                "name": "post_update",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Post update"
            },
            {
                "name": "arc72_tokenURI",
                "args": [
                    {
                        "type": "uint256",
                        "name": "tokenId"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[256]"
                }
            },
            {
                "name": "arc72_ownerOf",
                "args": [
                    {
                        "type": "uint256",
                        "name": "tokenId"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "address"
                },
                "desc": "Returns the address of the current owner of the NFT with the given tokenId"
            },
            {
                "name": "arc72_transferFrom",
                "args": [
                    {
                        "type": "address",
                        "name": "from_"
                    },
                    {
                        "type": "address",
                        "name": "to"
                    },
                    {
                        "type": "uint256",
                        "name": "tokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfers ownership of an NFT"
            },
            {
                "name": "arc72_approve",
                "args": [
                    {
                        "type": "address",
                        "name": "approved"
                    },
                    {
                        "type": "uint256",
                        "name": "tokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc72_setApprovalForAll",
                "args": [
                    {
                        "type": "address",
                        "name": "operator"
                    },
                    {
                        "type": "bool",
                        "name": "approved"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc72_getApproved",
                "args": [
                    {
                        "type": "uint256",
                        "name": "tokenId"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "arc72_isApprovedForAll",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "address",
                        "name": "operator"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc72_balanceOf",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc72_totalSupply",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc72_tokenByIndex",
                "args": [
                    {
                        "type": "uint256",
                        "name": "index"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "supportsInterface",
                "args": [
                    {
                        "type": "byte[4]",
                        "name": "interface_id"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "set_version",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contract_version"
                    },
                    {
                        "type": "uint64",
                        "name": "deployment_version"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve_update",
                "args": [
                    {
                        "type": "bool",
                        "name": "approval"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "grant_upgrader",
                "args": [
                    {
                        "type": "address",
                        "name": "upgrader"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_delegate",
                "args": [
                    {
                        "type": "address",
                        "name": "delegate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "participate",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "vote_k"
                    },
                    {
                        "type": "byte[32]",
                        "name": "sel_k"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_fst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_lst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_kd"
                    },
                    {
                        "type": "byte[64]",
                        "name": "sp_key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
};
/**
 * Exposes methods for constructing all available smart contract calls
 */
export class Osarc72TokenCallFactory {
    /**
     * Gets available create call factories
     */
    static get create() {
        return {
            /**
             * Constructs a create call for the OSARC72Token smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available update call factories
     */
    static get update() {
        return {
            /**
             * Constructs an update call for the OSARC72Token smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available delete call factories
     */
    static get delete() {
        return {
            /**
             * Constructs a delete call for the OSARC72Token smart contract using the kill()void ABI method
             *
             * @param args Any args for the contract call
             * @param params Any additional parameters for the call
             * @returns A TypedCallParams object for the call
             */
            kill(args, params = {}) {
                return {
                    method: 'kill()void',
                    methodArgs: Array.isArray(args) ? args : [],
                    ...params,
                };
            },
        };
    }
    /**
     * Constructs a no op call for the _staking_delegate(uint512)address ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static stakingDelegate(args, params) {
        return {
            method: '_staking_delegate(uint512)address',
            methodArgs: Array.isArray(args) ? args : [args.tokenId],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the mint(address,uint64,address)uint256 ABI method
     *
     * Mint a new NFT
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static mint(args, params) {
        return {
            method: 'mint(address,uint64,address)uint256',
            methodArgs: Array.isArray(args) ? args : [args.to, args.tokenId, args.delegate],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the burn(uint64)void ABI method
     *
     * Burn an NFT
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static burn(args, params) {
        return {
            method: 'burn(uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.tokenId],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_remote_delegate(address,uint256)void ABI method
     *
     * Set delegate
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setRemoteDelegate(args, params) {
        return {
            method: 'set_remote_delegate(address,uint256)void',
            methodArgs: Array.isArray(args) ? args : [args.delegate, args.tokenId],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the withdraw(uint64,uint64)void ABI method
     *
     * Remote withdraw
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static withdraw(args, params) {
        return {
            method: 'withdraw(uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.tokenId, args.amount],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the post_update()void ABI method
     *
     * Post update
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static postUpdate(args, params) {
        return {
            method: 'post_update()void',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_tokenURI(uint256)byte[256] ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72TokenUri(args, params) {
        return {
            method: 'arc72_tokenURI(uint256)byte[256]',
            methodArgs: Array.isArray(args) ? args : [args.tokenId],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_ownerOf(uint256)address ABI method
     *
     * Returns the address of the current owner of the NFT with the given tokenId
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72OwnerOf(args, params) {
        return {
            method: 'arc72_ownerOf(uint256)address',
            methodArgs: Array.isArray(args) ? args : [args.tokenId],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_transferFrom(address,address,uint256)void ABI method
     *
     * Transfers ownership of an NFT
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72TransferFrom(args, params) {
        return {
            method: 'arc72_transferFrom(address,address,uint256)void',
            methodArgs: Array.isArray(args) ? args : [args.from, args.to, args.tokenId],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_approve(address,uint256)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72Approve(args, params) {
        return {
            method: 'arc72_approve(address,uint256)void',
            methodArgs: Array.isArray(args) ? args : [args.approved, args.tokenId],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_setApprovalForAll(address,bool)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72SetApprovalForAll(args, params) {
        return {
            method: 'arc72_setApprovalForAll(address,bool)void',
            methodArgs: Array.isArray(args) ? args : [args.operator, args.approved],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_getApproved(uint256)address ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72GetApproved(args, params) {
        return {
            method: 'arc72_getApproved(uint256)address',
            methodArgs: Array.isArray(args) ? args : [args.tokenId],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_isApprovedForAll(address,address)bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72IsApprovedForAll(args, params) {
        return {
            method: 'arc72_isApprovedForAll(address,address)bool',
            methodArgs: Array.isArray(args) ? args : [args.owner, args.operator],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_balanceOf(address)uint256 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72BalanceOf(args, params) {
        return {
            method: 'arc72_balanceOf(address)uint256',
            methodArgs: Array.isArray(args) ? args : [args.owner],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_totalSupply()uint256 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72TotalSupply(args, params) {
        return {
            method: 'arc72_totalSupply()uint256',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc72_tokenByIndex(uint256)uint256 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc72TokenByIndex(args, params) {
        return {
            method: 'arc72_tokenByIndex(uint256)uint256',
            methodArgs: Array.isArray(args) ? args : [args.index],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the supportsInterface(byte[4])bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static supportsInterface(args, params) {
        return {
            method: 'supportsInterface(byte[4])bool',
            methodArgs: Array.isArray(args) ? args : [args.interfaceId],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_version(uint64,uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setVersion(args, params) {
        return {
            method: 'set_version(uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the approve_update(bool)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static approveUpdate(args, params) {
        return {
            method: 'approve_update(bool)void',
            methodArgs: Array.isArray(args) ? args : [args.approval],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the grant_upgrader(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static grantUpgrader(args, params) {
        return {
            method: 'grant_upgrader(address)void',
            methodArgs: Array.isArray(args) ? args : [args.upgrader],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_delegate(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setDelegate(args, params) {
        return {
            method: 'set_delegate(address)void',
            methodArgs: Array.isArray(args) ? args : [args.delegate],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static participate(args, params) {
        return {
            method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void',
            methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the transfer(address)void ABI method
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static transfer(args, params) {
        return {
            method: 'transfer(address)void',
            methodArgs: Array.isArray(args) ? args : [args.newOwner],
            ...params,
        };
    }
}
/**
 * A client to make calls to the OSARC72Token smart contract
 */
export class Osarc72TokenClient {
    algod;
    /**
     * The underlying `ApplicationClient` for when you want to have more flexibility
     */
    appClient;
    sender;
    /**
     * Creates a new instance of `Osarc72TokenClient`
     *
     * @param appDetails appDetails The details to identify the app to deploy
     * @param algod An algod client instance
     */
    constructor(appDetails, algod) {
        this.algod = algod;
        this.sender = appDetails.sender;
        this.appClient = algokit.getAppClient({
            ...appDetails,
            app: APP_SPEC
        }, algod);
    }
    /**
     * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
     *
     * @param result The AppCallTransactionResult to be mapped
     * @param returnValueFormatter An optional delegate to format the return value if required
     * @returns The smart contract response with an updated return value
     */
    mapReturnValue(result, returnValueFormatter) {
        if (result.return?.decodeError) {
            throw result.return.decodeError;
        }
        const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
            ? returnValueFormatter(result.return.returnValue)
            : result.return?.returnValue;
        return { ...result, return: returnValue };
    }
    /**
     * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
     *
     * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
     * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
     * @returns The result of the smart contract call
     */
    async call(typedCallParams, returnValueFormatter) {
        return this.mapReturnValue(await this.appClient.call(typedCallParams), returnValueFormatter);
    }
    /**
     * Idempotently deploys the OSARC72Token smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params = {}) {
        const createArgs = params.createCall?.(Osarc72TokenCallFactory.create);
        const updateArgs = params.updateCall?.(Osarc72TokenCallFactory.update);
        const deleteArgs = params.deleteCall?.(Osarc72TokenCallFactory.delete);
        return this.appClient.deploy({
            ...params,
            updateArgs,
            deleteArgs,
            createArgs,
            createOnCompleteAction: createArgs?.onCompleteAction,
        });
    }
    /**
     * Gets available create methods
     */
    get create() {
        const $this = this;
        return {
            /**
             * Creates a new instance of the OSARC72Token smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The create result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.create(args));
            },
        };
    }
    /**
     * Gets available update methods
     */
    get update() {
        const $this = this;
        return {
            /**
             * Updates an existing instance of the OSARC72Token smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The update result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.update(args));
            },
        };
    }
    /**
     * Gets available delete methods
     */
    get delete() {
        const $this = this;
        return {
            /**
             * Deletes an existing instance of the OSARC72Token smart contract using the kill()void ABI method.
             *
             * @param args The arguments for the smart contract call
             * @param params Any additional parameters for the call
             * @returns The delete result
             */
            async kill(args, params = {}) {
                return $this.mapReturnValue(await $this.appClient.delete(Osarc72TokenCallFactory.delete.kill(args, params)));
            },
        };
    }
    /**
     * Makes a clear_state call to an existing instance of the OSARC72Token smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The clear_state result
     */
    clearState(args = {}) {
        return this.appClient.clearState(args);
    }
    /**
     * Calls the _staking_delegate(uint512)address ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    stakingDelegate(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.stakingDelegate(args, params));
    }
    /**
     * Calls the mint(address,uint64,address)uint256 ABI method.
     *
     * Mint a new NFT
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    mint(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.mint(args, params));
    }
    /**
     * Calls the burn(uint64)void ABI method.
     *
     * Burn an NFT
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    burn(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.burn(args, params));
    }
    /**
     * Calls the set_remote_delegate(address,uint256)void ABI method.
     *
     * Set delegate
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setRemoteDelegate(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.setRemoteDelegate(args, params));
    }
    /**
     * Calls the withdraw(uint64,uint64)void ABI method.
     *
     * Remote withdraw
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    withdraw(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.withdraw(args, params));
    }
    /**
     * Calls the post_update()void ABI method.
     *
     * Post update
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    postUpdate(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.postUpdate(args, params));
    }
    /**
     * Calls the arc72_tokenURI(uint256)byte[256] ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72TokenUri(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72TokenUri(args, params));
    }
    /**
     * Calls the arc72_ownerOf(uint256)address ABI method.
     *
     * Returns the address of the current owner of the NFT with the given tokenId
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72OwnerOf(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72OwnerOf(args, params));
    }
    /**
     * Calls the arc72_transferFrom(address,address,uint256)void ABI method.
     *
     * Transfers ownership of an NFT
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72TransferFrom(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72TransferFrom(args, params));
    }
    /**
     * Calls the arc72_approve(address,uint256)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72Approve(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72Approve(args, params));
    }
    /**
     * Calls the arc72_setApprovalForAll(address,bool)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72SetApprovalForAll(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72SetApprovalForAll(args, params));
    }
    /**
     * Calls the arc72_getApproved(uint256)address ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72GetApproved(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72GetApproved(args, params));
    }
    /**
     * Calls the arc72_isApprovedForAll(address,address)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72IsApprovedForAll(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72IsApprovedForAll(args, params));
    }
    /**
     * Calls the arc72_balanceOf(address)uint256 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72BalanceOf(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72BalanceOf(args, params));
    }
    /**
     * Calls the arc72_totalSupply()uint256 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72TotalSupply(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72TotalSupply(args, params));
    }
    /**
     * Calls the arc72_tokenByIndex(uint256)uint256 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc72TokenByIndex(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.arc72TokenByIndex(args, params));
    }
    /**
     * Calls the supportsInterface(byte[4])bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    supportsInterface(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.supportsInterface(args, params));
    }
    /**
     * Calls the set_version(uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setVersion(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.setVersion(args, params));
    }
    /**
     * Calls the approve_update(bool)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    approveUpdate(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.approveUpdate(args, params));
    }
    /**
     * Calls the grant_upgrader(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    grantUpgrader(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.grantUpgrader(args, params));
    }
    /**
     * Calls the set_delegate(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setDelegate(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.setDelegate(args, params));
    }
    /**
     * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    participate(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.participate(args, params));
    }
    /**
     * Calls the transfer(address)void ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    transfer(args, params = {}) {
        return this.call(Osarc72TokenCallFactory.transfer(args, params));
    }
    /**
     * Extracts a binary state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns A BinaryState instance containing the state value, or undefined if the key was not found
     */
    static getBinaryState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if (!('valueRaw' in value))
            throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`);
        return {
            asString() {
                return value.value;
            },
            asByteArray() {
                return value.valueRaw;
            }
        };
    }
    /**
     * Extracts a integer state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns An IntegerState instance containing the state value, or undefined if the key was not found
     */
    static getIntegerState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if ('valueRaw' in value)
            throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`);
        return {
            asBigInt() {
                return typeof value.value === 'bigint' ? value.value : BigInt(value.value);
            },
            asNumber() {
                return typeof value.value === 'bigint' ? Number(value.value) : value.value;
            },
        };
    }
    /**
     * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
     */
    async getGlobalState() {
        const state = await this.appClient.getGlobalState();
        return {
            get contractVersion() {
                return Osarc72TokenClient.getIntegerState(state, 'contract_version');
            },
            get delegate() {
                return Osarc72TokenClient.getBinaryState(state, 'delegate');
            },
            get deploymentVersion() {
                return Osarc72TokenClient.getIntegerState(state, 'deployment_version');
            },
            get owner() {
                return Osarc72TokenClient.getBinaryState(state, 'owner');
            },
            get stakeable() {
                return Osarc72TokenClient.getIntegerState(state, 'stakeable');
            },
            get totalSupply() {
                return Osarc72TokenClient.getBinaryState(state, 'totalSupply');
            },
            get updatable() {
                return Osarc72TokenClient.getIntegerState(state, 'updatable');
            },
            get upgrader() {
                return Osarc72TokenClient.getBinaryState(state, 'upgrader');
            },
        };
    }
    compose() {
        const client = this;
        const atc = new AtomicTransactionComposer();
        let promiseChain = Promise.resolve();
        const resultMappers = [];
        return {
            stakingDelegate(args, params) {
                promiseChain = promiseChain.then(() => client.stakingDelegate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            mint(args, params) {
                promiseChain = promiseChain.then(() => client.mint(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            burn(args, params) {
                promiseChain = promiseChain.then(() => client.burn(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setRemoteDelegate(args, params) {
                promiseChain = promiseChain.then(() => client.setRemoteDelegate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            withdraw(args, params) {
                promiseChain = promiseChain.then(() => client.withdraw(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            postUpdate(args, params) {
                promiseChain = promiseChain.then(() => client.postUpdate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72TokenUri(args, params) {
                promiseChain = promiseChain.then(() => client.arc72TokenUri(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72OwnerOf(args, params) {
                promiseChain = promiseChain.then(() => client.arc72OwnerOf(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72TransferFrom(args, params) {
                promiseChain = promiseChain.then(() => client.arc72TransferFrom(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72Approve(args, params) {
                promiseChain = promiseChain.then(() => client.arc72Approve(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72SetApprovalForAll(args, params) {
                promiseChain = promiseChain.then(() => client.arc72SetApprovalForAll(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72GetApproved(args, params) {
                promiseChain = promiseChain.then(() => client.arc72GetApproved(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72IsApprovedForAll(args, params) {
                promiseChain = promiseChain.then(() => client.arc72IsApprovedForAll(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72BalanceOf(args, params) {
                promiseChain = promiseChain.then(() => client.arc72BalanceOf(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72TotalSupply(args, params) {
                promiseChain = promiseChain.then(() => client.arc72TotalSupply(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc72TokenByIndex(args, params) {
                promiseChain = promiseChain.then(() => client.arc72TokenByIndex(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            supportsInterface(args, params) {
                promiseChain = promiseChain.then(() => client.supportsInterface(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setVersion(args, params) {
                promiseChain = promiseChain.then(() => client.setVersion(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            approveUpdate(args, params) {
                promiseChain = promiseChain.then(() => client.approveUpdate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            grantUpgrader(args, params) {
                promiseChain = promiseChain.then(() => client.grantUpgrader(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setDelegate(args, params) {
                promiseChain = promiseChain.then(() => client.setDelegate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            participate(args, params) {
                promiseChain = promiseChain.then(() => client.participate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            transfer(args, params) {
                promiseChain = promiseChain.then(() => client.transfer(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            get update() {
                const $this = this;
                return {
                    bare(args) {
                        promiseChain = promiseChain.then(() => client.update.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            get delete() {
                const $this = this;
                return {
                    kill(args, params) {
                        promiseChain = promiseChain.then(() => client.delete.kill(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            clearState(args) {
                promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            addTransaction(txn, defaultSender) {
                promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)));
                return this;
            },
            async atc() {
                await promiseChain;
                return atc;
            },
            async simulate(options) {
                await promiseChain;
                const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
                return {
                    ...result,
                    returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            },
            async execute(sendParams) {
                await promiseChain;
                const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            }
        };
    }
}
